/*
 * App URI: PosProductList
 * Source Location: PosProductList.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4878), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("PosProductList", { 
		onPrepare: function(loader) {
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * POSSalesManagement.js
			 * Created at 2024. 1. 19. 오후 2:17:29.
			 *
			 * @author sunrise
			 ************************************************/

			/*
			 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit2(e){
				getProdCls();	
			}

			function getProdCls() {
				
			    // 서브미션 생성
			    var submission = new cpr.protocols.Submission();
			    
			    // 조회할 데이터의 URL 설정
			    submission.action = "/POS/GetInitDataProd.do"; 

			    // response data의 type 설정
			    submission.responseType = "javascript";

			    // 서버로 요청 전송
			    submission.send()
			    
			    submission.addEventListener("submit-success", function(e) {
				    var subMainList = e.control;
				    var jsonObj = JSON.parse(subMainList.xhr.responseText);
				    console.log(jsonObj);
				
				    // 상품분류 선택박스에 넣어주기 
				    var cmb1 = app.lookup("PROD_PERS_CD");
				
					var ds2 = app.lookup("prodCls");
					
				    // 가져온 JSON 데이터를 데이터셋에 설정
				    var dataList = jsonObj.productType; // 예시 데이터에서 salesData로 설정했다고 가정
				   
				    for (var i = 0; i < dataList.length; i++) {
				        var rowData = dataList[i];
				        
				        console.log(rowData);
				        
				        var newRow = ds2.addRow();
				        var lastIndex = ds2.getRowCount() - 1;
				        
				        // 각 항목에 대해 직접 설정
				        ds2.setValue(lastIndex, "label", rowData.PROD_CLS_NM);
				        ds2.setValue(lastIndex, "value", rowData.PROD_CLS_CD);	                        
				  	}
				});

			}

			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(e){
				getProdList();
			}
				
			/*
			 * 서버로부터 데이터를 조회하여 그리드에 표시하는 함수
			 */
			function getProdList() {
			    var prodCls = null;
			    var searchInput = app.lookup("searchInput").value;
			    var clientNm = app.lookup("CLIENT_NM").value;
			    
			    // prodCls가 null이 아닌 경우에만 치환
			    if (app.lookup("PROD_PERS_CD").value !== null) {
			        // 원하는 치환 값으로 변경
			        prodCls = app.lookup("PROD_PERS_CD").value;
			    }
			    
			    console.log(prodCls);
			    console.log(searchInput);
			     
			    var requestData = {
			        "searchInput": searchInput.toString(),
			        "prodCls": prodCls !== null ? prodCls.toString() : null,
			        "clientNm": clientNm.toString()
			    };

			    var submission = new cpr.protocols.Submission();
			    submission.action = "/POS/GetProdData.do";
			    submission.responseType = "javascript";
			    submission.setRequestObject(requestData);
			    submission.send();
			    
			    submission.addEventListener("submit-success", function(e) {
			        var subMainList = e.control;
			        var jsonObj = JSON.parse(subMainList.xhr.responseText);
			        console.log(jsonObj);
			    
			        var membList = jsonObj["membList"];    
			    
			        // 가져온 데이터를 그리드에 표시하기
			        var grd1 = app.lookup("grd1");
			    
			        // 데이터셋 설정
			        var ds2 = app.lookup("ds2");
			        ds2.clear(); // 기존 데이터 모두 삭제
			    
			        // 가져온 JSON 데이터를 데이터셋에 설정
			       
			        for (var i = 0; i < membList.length; i++) {
			            var rowData = membList[i];
			            
			            console.log(rowData);
			            
			            var newRow = ds2.addRow();
			            var lastIndex = ds2.getRowCount() - 1;
			            
			            // 각 항목에 대해 직접 설정
			            ds2.setValue(lastIndex, "MEMB_NM", rowData.MEMB_NM);
			            ds2.setValue(lastIndex, "MEMB_SER_NO", rowData.MEMB_SER_NO);
			            ds2.setValue(lastIndex, "MOB_PH_NO", rowData.MOB_PH_NO);
			            ds2.setValue(lastIndex, "PERS_COP_TY", rowData.PERS_COP_TY)             
			        }
			    
			    });    
			}






			/*
			 * "조회" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.

			function onButtonClick3(e) {
			    var button = e.control;
				searchSaleList();

			}

			function searchSaleList(callback) {
			    var grd1 = app.lookup("grd1");
			    var checkedRow = grd1.getRadioSelection(); // 체크된 행의 인덱스 배열 가져오기
			    var salesSerNos = null;
			    console.log(checkedRow);
			    if (checkedRow !== -1) {
			        var firstCheckedRow = grd1.getRow(checkedRow);
			        salesSerNos = firstCheckedRow.getValue("SALES_SER_NO");
			    }

			    TotalReset();
			    var cancelTy = app.lookup("cancelRadio");
			    cancelTy.value = "0";

			    var phNo = app.lookup("HDP_NO").value;
			    var barcode = app.lookup("BAR_CODE").value;
			    var salesTy = app.lookup("SALES_TY").value;

			    var transStart = app.lookup("transStart").value;
			    var transEnd = app.lookup("transEnd").value;
			    var convertedTransStart = "";
			    var convertedTransEnd = "";

			    if (transStart) {
			        var dateTimeStart = convertDateTime(transStart);
			        convertedTransStart = dateTimeStart.datePart;
			        var convertedTimeStart = dateTimeStart.timePart;
			    }
			    if (transEnd) {
			        var dateTimeEnd = convertDateTime(transEnd);
			        convertedTransEnd = dateTimeEnd.datePart;
			        var convertedTimeEnd = dateTimeEnd.timePart;
			    }

			    var requestData = {
			        "phNo": phNo.toString(),
			        "barcode": barcode,
			        "salesTy": salesTy,
			        "transDtStart": convertedTransStart,
			        "transTmStart": convertedTimeStart,
			        "transDtEnd": convertedTransEnd,
			        "transTmEnd": convertedTimeEnd
			    };

			    var submission = new cpr.protocols.Submission();
			    
			    submission.action = "/POS/GetSalesData.do";
			    submission.responseType = "javascript";
			    submission.setRequestObject(requestData);
			    submission.send();

			    submission.addEventListener("submit-success", function(e) {
			        var subMainList = e.control;
			        var jsonObj = JSON.parse(subMainList.xhr.responseText);
			        console.log(jsonObj);

			        var grd1 = app.lookup("grd1");
			        var ds2 = app.lookup("ds2");
			        ds2.clear();

			        var dataList = jsonObj.productData;
			        for (var i = 0; i < dataList.length; i++) {
			            var rowData = dataList[i];
			            var newRow = ds2.addRow();
			            var lastIndex = ds2.getRowCount() - 1;

			            ds2.setValue(lastIndex, "PROD_CD", rowData.PROD_CD);
			            ds2.setValue(lastIndex, "PROD_NM", rowData.PROD_NM);
			            ds2.setValue(lastIndex, "PROD_CLS_NM", rowData.PROD_CLS_NM);
			            ds2.setValue(lastIndex, "SELL_PR", rowData.SELL_PR);
			            ds2.setValue(lastIndex, "BAR_CODE", rowData.BAR_CODE);
			            ds2.setValue(lastIndex, "CLIENT_NO", rowData.CLIENT_NO);
			            ds2.setValue(lastIndex, "CLIENT_NM", rowData.CLIENT_NM);
			        }

			        if (typeof callback === 'function') {
			            callback();
			        }
			    });
			}
			/*
			// YYYY-MM-DD, HH:mm 형식의 문자열을 YYYYMMDDHHmm 형식으로 변환하는 함수
			function convertDateTime(dateTimeStr) {
			    // 구분자를 제거하고 숫자만 남깁니다.
			    var numbersOnly = dateTimeStr.replace(/\D/g, '');

			    // 문자열을 날짜와 시간으로 분리합니다.
			    var datePart = numbersOnly.substring(0, 8); // YYYYMMDD
			    var timePart = numbersOnly.substring(8);    // HHmm

			    // YYYYMMDDHHmm 형식으로 조합하여 반환합니다.
			    return {
			        "datePart": datePart,
			        "timePart": timePart
			    };
			}



			/*
			 * 그리드에서 row-radio-selected 이벤트 발생 시 호출.
			 * Grid의 행 선택 컬럼(columnType=radio)이 선택 되었을 때 발생하는 이벤트.

			function onGrd1RowRadioSelected(e){
				var rowIndex = null;
			     searchSalesProduct(rowIndex);
			}

			function searchSalesProduct(rowIndex) {
			    console.log("salesProdcut를 검색합니다");
			    var grd1 = app.lookup("grd1");
			    var selectedRow;
			    // rowIndex가 null이면 선택된 행을 가져옴
			    if (rowIndex === null) {
			        selectedRow = grd1.getSelectedRow(); // 선택된 행 가져오기
			    } else {
			        selectedRow = grd1.getRow(rowIndex); // 해당 인덱스의 행 가져오기
			    }
			    
			    var salesSerNo = "";
			    var salesTy = "";
			    var salesAmt = "";
			    var outputTotal = app.lookup("total");
			    var outputCash = app.lookup("cash"); // 수정: outputCash 컨트롤 가져오기
			    var outputCard = app.lookup("card"); // 수정: outputCard 컨트롤 가져오기
			    
			    TotalReset();
			    
			    if (selectedRow) {
			        // 선택된 행에서 판매 일련 번호 가져오기
			        salesSerNo = selectedRow.getValue("SALES_SER_NO");
			        salesTy = selectedRow.getValue("SALES_TY");
			        salesAmt = selectedRow.getValue("SALES_AMT");
			    }

				// 판매 구분이 1이면 outputTotal과 outputCash에 SALES_AMT 설정
				if (salesTy === "1") {
				    outputTotal.value = Number(salesAmt).toLocaleString();
				    outputCash.value = Number(salesAmt).toLocaleString(); // 수정: outputCash에 SALES_AMT 설정
				}
				// 판매 구분이 2이면 outputTotal과 outputCard에 SALES_AMT 설정
				else if (salesTy === "2") {
				    outputTotal.value = Number(salesAmt).toLocaleString();
				    outputCard.value = Number(salesAmt).toLocaleString(); // 수정: outputCard에 SALES_AMT 설정
				}

			    
			    // Submission 생성
			    var submission = new cpr.protocols.Submission();

			    // 전송할 URL 설정
			    submission.action = "/POS/GetSalesProduct.do"; // GetSalesProduct.do 로 변경

			    // response data의 type 설정
			    submission.responseType = "javascript"; // JSON 데이터를 받기 위해 javascript 설정

			   
				// 서버로 전송할 데이터를 설정합니다.
			    submission.setParameters("salesSerNo", salesSerNo);
			    submission.setParameters("salesTy", salesTy);
			    // 서브미션 전송
			    submission.send();

			    // 서브미션의 submit-success 이벤트 리스너 추가
			    submission.addEventListener("submit-success", function(e) {
				    var subMainList = e.control;
				    var jsonObj = JSON.parse(subMainList.xhr.responseText);
				    console.log(jsonObj);
				
				    // 가져온 데이터를 그리드에 표시하기
				    var grd2 = app.lookup("grd2");
				
				    // 데이터셋 설정
				    var ds1 = app.lookup("ds1");
				    ds1.clear(); // 기존 데이터 모두 삭제
				
				    // 가져온 JSON 데이터를 데이터셋에 설정
				    var dataList = jsonObj.salesProduct; // 예시 데이터에서 salesData로 설정했다고 가정
				    for (var i = 0; i < dataList.length; i++) {
				        var rowData = dataList[i];
				        
				        console.log(rowData);
				        
				        var newRow = ds1.addRow();
				        var lastIndex = ds1.getRowCount() - 1;
				        
				        // TRANS_TY가 3이면 해당 행의 checkbox 비활성화
				        // TRANS_TY가 3이면 해당 행의 checkbox 비활성화
					    if (rowData.TRANS_TY === "3") {
					        grd2.setEnabledTypedCell("checkbox", lastIndex, false);  
					        grd2.setRowState(lastIndex, cpr.data.tabledata.RowState.UNCHANGED);
					        
					        // rowIndex 컬럼에 "취소"라는 단어를 설정합니다.
					        ds1.setValue(lastIndex, "TRANS_TY", "취소");
					    } else {
					        // TRANS_TY가 3이 아닌 경우, 기존 로우 인덱스 값을 설정합니다.
					         ds1.setValue(lastIndex, "TRANS_TY", "일반");
					    }
				        
				        // 각 항목에 대해 직접 설정
				        ds1.setValue(lastIndex, "BAR_CODE", rowData.BAR_CODE);
				        ds1.setValue(lastIndex, "PROD_NM", rowData.PROD_NM);
				        ds1.setValue(lastIndex, "SALES_PR", rowData.SALES_PR);
				        ds1.setValue(lastIndex, "QTY", rowData.QTY);
				        ds1.setValue(lastIndex, "SALE_AMT", rowData.SALE_AMT);
				        //ds1.setValue(lastIndex, "VAT", rowData.VAT);
				        ds1.setValue(lastIndex, "SALES_AMT", rowData.SALES_AMT);
				        ds1.setValue(lastIndex, "POINT", rowData.POINT);
				        ds1.setValue(lastIndex, "SER_NO", rowData.SER_NO);
				    
				    	
				    } 
			        
				    // 그리드 새로고침
				    grd2.redraw();
				    
				});
			}

			/*
			 * "선택취소" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.

			function onButtonClick(e){
			    var button = e.control;
			    var grd1 = app.lookup("grd1");
			    var grd2 = app.lookup("grd2");
			    var selectedRowIndices = grd2.getCheckRowIndices();
			   
			    var serNos = []; // 선택된 행의 일련 번호들 배열
			    var isFullCancel = false; // 전체 취소 여부
			   
			    // 그리드1
				var grd1 = app.lookup("grd1");
				var checkedRow = grd1.getRadioSelection(); // 체크된 행의 인덱스 배열 가져오기
				var salesSerNos = "";
				  
			    console.log(checkedRow);
			    if (checkedRow === -1) {
				    alert("선택된 판매목록이 없습니다.");
				    return;
				}
				
				if (selectedRowIndices.length === 0) {
				    alert("선택된 상품목록이 없습니다.");
				    return;
				}
				
			    var firstCheckedRow = grd1.getRow(checkedRow);
			    salesSerNos = firstCheckedRow.getValue("SALES_SER_NO");

				 
			    
			    // 확인 팝업 표시
			    if (!confirm("선택된 항목을 취소하시겠습니까?")) {
			        return; // 사용자가 취소를 선택한 경우 함수 종료
			    }
			    
			    console.log(selectedRowIndices);
			    // 선택된 행들의 판매 일련 번호와 일련 번호를 추출합니다.
			    for (var i = 0; i < selectedRowIndices.length; i++) {
			        var rowIndex = selectedRowIndices[i];
			        var selectedRow = grd2.getRow(rowIndex)
			        var rowData = selectedRow.getRowData();
			        console.log(rowData["PROD_NM"]);
			        console.log(rowData["SER_NO"]);
			        serNos.push(rowData["SER_NO"]);
			    }
			    
			    // 서버로 전송할 데이터를 객체로 정의합니다.
			    var requestData = {
			        "salesSerNos": salesSerNos.toString(),
			        "serNos": serNos,
			        "isFullCancel": isFullCancel // 전체 취소 여부를 false로 설정하여 선택 취소를 수행합니다.
			    };
			    
			    // Submission 생성
			    var submission = new cpr.protocols.Submission();
			    
			    // 전송할 URL 설정
			    submission.action = "/POS/cancelSales.do";
			    
			    // response data의 type 설정
			    submission.responseType = "javascript";
			    
			    
			    // 서버로 전송할 데이터를 설정합니다.
			    submission.setRequestObject(requestData);
			    
			    // 서브미션 전송
			    submission.send();
			    // 서브미션 성공 이벤트 핸들러 등록
				submission.addEventListener("submit-success", function(event) {
				    var sms1 = event.control;
				    
				    console.log(sms1.xhr.responseText);    
				    var jsonObj = JSON.parse(sms1.xhr.responseText);    
				    console.log(jsonObj);    
				    
				    var cancel = jsonObj.cancel;
				    console.log("Cancel:",cancel); 
				    
				    // cancel이 2이면 radio checked된 행 삭제
				    if (cancel === 2) {
				        // radio checked된 행 삭제
				        grd1.deleteRow(checkedRow);
				    }
				    
				    searchSaleList(function() {
				        // searchSaleList() 함수 실행 후에 처리할 내용을 이곳에 작성합니다.
				        // 그리드의 행을 찾고 해당 행을 체크하는 코드를 여기에 작성합니다.
				        
				        var ds2 = app.lookup("ds2");
				        var rows = grd1.getRowCount();
				        console.log("Searching for sales_ser_No:", salesSerNos);
				        var rowIndex = -1; // 일치하는 행의 인덱스를 저장할 변수입니다.
				        
				        for (var i = 0; i < rows; i++) {
				            console.log("i:", i);
				            var salesSerNo = ds2.getValue(i, "SALES_SER_NO"); // 현재 행의 판매 일련 번호를 가져옵니다.
				            console.log("Current sales_ser_No:", salesSerNo);
				            
				            if (salesSerNo == salesSerNos) {
				                // 해당 행의 인덱스를 저장합니다.
				                rowIndex = i;
				                console.log("rowIndex:",rowIndex);
				                break; // 일치하는 행을 찾았으므로 루프를 종료합니다.
				            }
				        }
				        
				        console.log("totalReset");            
				        TotalReset();
				        
				        // 일치하는 행을 찾은 경우에만 처리합니다.
				        if (rowIndex !== -1) {
				            console.log("Matching row found at index:", rowIndex);
				            // grd1에서 해당 행을 체크합니다.
				            grd1.selectRadio(rowIndex);
				        }
				        
				        // 선택된 행을 기반으로 searchSalesProduct()를 실행합니다.
			            var selectedRow = grd1.getRow(rowIndex); // 선택된 행 읽기
			            var selectedRowConfirm = grd1.getSelectedRowIndex();
			            
			            console.log("selectedRowConfirm:",selectedRowConfirm);
			            
			            if (selectedRow) {
			                // 선택된 행이 유효한 경우에만 실행합니다.
			                var salesSerNo = selectedRow.getValue("SALES_SER_NO");
			                console.log("Selected sales_ser_No:", salesSerNo);
			                // searchSalesProduct() 함수 호출
			                searchSalesProduct(rowIndex);
			            } else {
			                console.log("Selected row is not valid.");
			            }
			            
				        alert("취소되었습니다.");
				        
				        var grd2 = app.lookup("grd2");
				        var rowCount = grd2.getRowCount() // 그리드의 행 수를 가져옵니다.
				        console.log(rowCount);
				        for (var i = rowCount - 1; i >= 0; i--) {
				            grd2.deleteRow(i); // 각 행을 삭제합니다.
				        }
				        
				        
				        
				    });
				});				
			}

			/*
			 * "전체취소" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.

			function onButtonClick2(e){
			    var button = e.control;
			    
			    // 그리드1
				var grd1 = app.lookup("grd1");
				var checkedRow = grd1.getRadioSelection(); // 체크된 행의 인덱스 배열 가져오기
				var salesSerNos = "";
				var serNos = []; // 선택된 행의 일련 번호들 배열
				  
			    console.log(checkedRow);
			    if (checkedRow === -1) {
				    alert("선택된 판매목록이 없습니다.");
				    return;
				}
				
				var firstCheckedRow = grd1.getRow(checkedRow);
			    var cancelType = firstCheckedRow.getValue("CANC_TY");
			    
			    if (cancelType === '1') {
			        alert("이미 취소된 영수증입니다.");
			        return;
			    }
				
				 // 확인 팝업 표시
			    if (!confirm("전체 항목을 취소하시겠습니까?")) {
			        return; // 사용자가 취소를 선택한 경우 함수 종료
			    }
			    
			    
				var grd2 = app.lookup("grd2");
					grd2.checkAllRow();
			   	var selectedRowIndices = grd2.getCheckRowIndices();
			    
			    
			   for (var i = 0; i < selectedRowIndices.length; i++) {
			        var rowIndex = selectedRowIndices[i];
			        var selectedRow = grd2.getRow(rowIndex)
			        var rowData = selectedRow.getRowData();
			        console.log(rowData["PROD_NM"]);
			        console.log(rowData["SER_NO"]);
			        serNos.push(rowData["SER_NO"]);
			    }
			    
				
			    var firstCheckedRow = grd1.getRow(checkedRow);
			    salesSerNos = firstCheckedRow.getValue("SALES_SER_NO");
				    
			    
			    
			    // 전체 취소 여부를 true로 설정하여 전체 취소를 수행합니다.
			    var isFullCancel = true;
			    
			    // 서버로 전송할 데이터를 설정합니다.
			    var requestData = {
			        "salesSerNos": salesSerNos,
			        "serNos": serNos,
			        "isFullCancel": isFullCancel
			    };
			    
			    // Submission 생성
			    var submission = new cpr.protocols.Submission();
			    
			    // 전송할 URL 설정
			    submission.action = "/POS/cancelSales.do";
			    
			    // response data의 type 설정
			    submission.responseType = "text";
			    
			    // 서버로 전송할 데이터를 설정합니다.
			    submission.setRequestObject(requestData);
			    
			    // 서브미션 전송
			    submission.send();
			    
			    // 서브미션 성공 이벤트 핸들러 등록
			    submission.addEventListener("submit-success", function(event) {
			     
				    var sms1 = event.control;
				    
				    console.log(sms1.xhr.responseText);    
				    var jsonObj = JSON.parse(sms1.xhr.responseText);    
				    console.log(jsonObj);    
			       
			        var cancel = jsonObj.cancel;
			    	
			        console.log("Cancel:",cancel); 
			        
			        // cancel이 2이면 radio checked된 행 삭제
			        if (cancel === 2) {
			            // radio checked된 행 삭제
			            grd1.deleteRow(checkedRow);
			        }
			         searchSaleList(function() {
				        // searchSaleList() 함수 실행 후에 처리할 내용을 이곳에 작성합니다.
				        // 그리드의 행을 찾고 해당 행을 체크하는 코드를 여기에 작성합니다.
				        
				        var ds2 = app.lookup("ds2");
				        var rows = grd1.getRowCount();
				        console.log("Searching for sales_ser_No:", salesSerNos);
				        var rowIndex = -1; // 일치하는 행의 인덱스를 저장할 변수입니다.
				        
				        for (var i = 0; i < rows; i++) {
				            console.log("i:", i);
				            var salesSerNo = ds2.getValue(i, "SALES_SER_NO"); // 현재 행의 판매 일련 번호를 가져옵니다.
				            console.log("Current sales_ser_No:", salesSerNo);
				            
				            if (salesSerNo == salesSerNos) {
				                // 해당 행의 인덱스를 저장합니다.
				                rowIndex = i;
				                console.log("rowIndex:",rowIndex);
				                break; // 일치하는 행을 찾았으므로 루프를 종료합니다.
				            }
				        }
				        
				        console.log("totalReset");            
				        TotalReset();
				        
				        // 일치하는 행을 찾은 경우에만 처리합니다.
				        if (rowIndex !== -1) {
				            console.log("Matching row found at index:", rowIndex);
				            // grd1에서 해당 행을 체크합니다.
				            grd1.selectRadio(rowIndex);
				        }
				        
				        // 선택된 행을 기반으로 searchSalesProduct()를 실행합니다.
			            var selectedRow = grd1.getRow(rowIndex); // 선택된 행 읽기
			            var selectedRowConfirm = grd1.getSelectedRowIndex();
			            
			            console.log("selectedRowConfirm:",selectedRowConfirm);
			            
			            if (selectedRow) {
			                // 선택된 행이 유효한 경우에만 실행합니다.
			                var salesSerNo = selectedRow.getValue("SALES_SER_NO");
			                console.log("Selected sales_ser_No:", salesSerNo);
			                // searchSalesProduct() 함수 호출
			                searchSalesProduct(rowIndex);
			            } else {
			                console.log("Selected row is not valid.");
			            }
			            
				        alert("취소되었습니다.");
				        
				        var grd2 = app.lookup("grd2");
				        var rowCount = grd2.getRowCount() // 그리드의 행 수를 가져옵니다.
				        console.log(rowCount);
				        for (var i = rowCount - 1; i >= 0; i--) {
				            grd2.deleteRow(i); // 각 행을 삭제합니다.
				        }
			        
				    }); 
			    });
			    
			    //--------------------다시 상품등록 (posmain)---------------------------
				// 사용자에게 다시 계산 여부를 묻는 메시지 표시
				if (confirm("취소된 품목들을 다시 계산하시겠습니까?")) {
				    // 취소된 품목들을 저장할 배열 초기화
				    // 취소된 품목들 배열을 추출
				    var cancelledItems = [];
				
				    // 선택된 품목들의 행 데이터를 반복하여 처리
				    for (var i = 0; i < selectedRowIndices.length; i++) {
				        var rowIndex = selectedRowIndices[i];
				        var selectedRow = grd2.getRow(rowIndex);
				        var rowData = selectedRow.getRowData();
				        
				        // 각 행의 데이터를 맵으로 만들어서 배열에 추가
				        var itemMap = {
				            "barcode": rowData["BAR_CODE"],
				            "qty": rowData["QTY"]
				            // 다른 필요한 데이터도 필요에 따라 추가할 수 있습니다.
				        };
				        
				        // 취소된 품목들 배열에 추가
				        cancelledItems.push(itemMap);
				    }
				    
				    console.log("Cancelled Items: ", cancelledItems); // 디버깅을 위한 출력
				
				    // POS 메인 페이지로 취소된 품목들 배열을 전달
				    var page = "/POS/PosMain.do";
				    
				    // POST 요청을 보내기 위한 form 생성
				    var form = document.createElement("form");
				    form.method = "GET";
				    form.action = page;
				    
				    // 취소된 품목들 배열을 form에 추가 (hidden input으로 추가)
				    var input = document.createElement("input");
				    input.type = "hidden";
				    input.name = "cancelledItems";
				    input.value = JSON.stringify(cancelledItems);
				    form.appendChild(input);
				    
				    // form을 body에 추가하고 전송
				    document.body.appendChild(form);
				    form.submit();
				   
				}    
			}

			function TotalReset(){
				app.lookup("total").value = ""
				app.lookup("cash").value = ""; // null이면 공백 문자열로 대체
			    app.lookup("card").value = "";
			    app.lookup("gift").value = "";
			    app.lookup("point").value = "";
			}

			/*
			 * 라디오 버튼에서 selection-change 이벤트 발생 시 호출.
			 * 라디오버튼 아이템을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 
			function onCancelRadioSelectionChange(e){
				
				var cancelRadio = e.control;
			    var grd1 = app.lookup("grd1");
			    var cancelDs = app.lookup("cancelDs");
			    // 라디오 버튼의 선택값 가져오기
			    var cancelType = cancelRadio.value;
			    console.log(cancelType);
			    // 그리드 필터링
			    if (cancelType === "0") {
			        // 전체인 경우 모든 항목을 보여줍니다.
			        grd1.clearFilter();
			       
			    } else if (cancelType === "1") {
			        // 취소인 경우 CANC_TY가 1 또는 2인 항목만 보여줍니다.
			        grd1.setFilter("CANC_TY==1")
			    } else if (cancelType === "2") {
			        // 미취소인 경우 CANC_TY가 2인 항목만 보여줍니다.
			         grd1.setFilter("CANC_TY==2")
			    } 
			}
			 */;
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("prodCls");
			dataSet_1.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("ds1");
			dataSet_2.parseData({
				"columns": [
					{"name": "BAR_CODE"},
					{"name": "TRANS_TY"},
					{"name": "PROD_NM"},
					{"name": "SALES_PR"},
					{"name": "QTY"},
					{
						"name": "TOTAL_PR",
						"dataType": "expression",
						"displayOnly": true,
						"expression": "(QTY*SALES_PR)"
					},
					{"name": "SALE_AMT"},
					{"name": "VAT"},
					{"name": "SALES_AMT"},
					{"name": "POINT"},
					{"name": "SER_NO"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("ds2");
			dataSet_3.parseData({
				"columns": [
					{
						"name": "PROD_CD",
						"dataType": "string"
					},
					{"name": "PROD_CLS_NM"},
					{"name": "PROD_NM"},
					{"name": "SELL_PR"},
					{"name": "BAR_CODE"},
					{"name": "CLIENT_NM"},
					{"name": "CLIENT_NO"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("saleTy");
			dataSet_4.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"}
				],
				"rows": [
					{"label": "현금", "value": "1"},
					{"label": "카드", "value": "2"}
				]
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("cancelTy");
			dataSet_5.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"}
				],
				"rows": [
					{"label": "취소", "value": "1"},
					{"label": "판매", "value": "2"}
				]
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("cancelDs");
			dataSet_6.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"}
				],
				"rows": [
					{"label": "전체", "value": "0"},
					{"label": "판매", "value": "2"},
					{"label": "취소", "value": "1"}
				]
			});
			app.register(dataSet_6);
			var submission_1 = new cpr.protocols.Submission("sms1");
			submission_1.addResponseData(dataSet_3, false);
			app.register(submission_1);
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var hTMLSnippet_1 = new cpr.controls.HTMLSnippet();
			hTMLSnippet_1.value = "전표 내역";
			hTMLSnippet_1.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "1px",
				"color" : "white",
				"border-right-width" : "1px",
				"vertical-align" : "middle",
				"border-left-width" : "1px",
				"border-top-style" : "solid",
				"background-color" : "black",
				"border-radius" : "25px",
				"border-left-style" : "solid",
				"border-bottom-width" : "1px",
				"border-bottom-style" : "solid",
				"text-align" : "center"
			});
			container.addChild(hTMLSnippet_1, {
				"top": "150px",
				"left": "20px",
				"width": "100px",
				"height": "25px"
			});
			
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("ds2"),
				"showDeletedRow": false,
				"columns": [
					{"width": "25px"},
					{"width": "84px"},
					{"width": "94px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "146px"},
					{"width": "100px"},
					{
						"width": "100px",
						"visible": false
					}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "PROD_CD";
								cell.text = "상품코드";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "PROD_CLS_NM";
								cell.text = "상품분류";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "PROD_NM";
								cell.text = "상품명";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "BAR_CODE";
								cell.text = "판매가";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "BAR_CODE";
								cell.text = "바코드";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.targetColumnName = "CLIENT_NM";
								cell.text = "거래처명";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 7},
							"configurator": function(cell){
								cell.targetColumnName = "CLIENT_NO";
								cell.text = "CLIENT_NO";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnType = "radio";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "PROD_CD";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "PROD_CLS_NM";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "PROD_NM";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.columnName = "SELL_PR";
								cell.control = (function(){
									var numberEditor_1 = new cpr.controls.NumberEditor("nbe1");
									numberEditor_1.readOnly = true;
									numberEditor_1.bind("value").toDataColumn("SELL_PR");
									return numberEditor_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.columnName = "BAR_CODE";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.columnName = "CLIENT_NM";
								cell.control = (function(){
									var output_1 = new cpr.controls.Output();
									output_1.style.css({
										"text-align" : "center"
									});
									output_1.bind("value").toDataColumn("CLIENT_NM");
									return output_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 7},
							"configurator": function(cell){
								cell.columnName = "CLIENT_NO";
								cell.control = (function(){
									var output_2 = new cpr.controls.Output();
									output_2.bind("value").toDataColumn("CLIENT_NO");
									return output_2;
								})();
							}
						}
					]
				}
			});
			grid_1.style.css({
				"text-align" : "center"
			});
			if(typeof onGrd1SelectionChange == "function") {
				grid_1.addEventListener("selection-change", onGrd1SelectionChange);
			}
			if(typeof onGrd1RowRadioSelected == "function") {
				grid_1.addEventListener("row-radio-selected", onGrd1RowRadioSelected);
			}
			if(typeof onGrd1Insert == "function") {
				grid_1.addEventListener("insert", onGrd1Insert);
			}
			container.addChild(grid_1, {
				"top": "190px",
				"left": "20px",
				"width": "982px",
				"height": "521px"
			});
			
			var group_1 = new cpr.controls.Container();
			group_1.style.css({
				"background-color" : "#E0E0E0"
			});
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var comboBox_1 = new cpr.controls.ComboBox("PROD_PERS_CD");
				comboBox_1.preventInput = true;
				(function(comboBox_1){
					comboBox_1.setItemSet(app.lookup("prodCls"), {
						"label": "label",
						"value": "value"
					});
				})(comboBox_1);
				if(typeof onSALES_TYSelectionChange == "function") {
					comboBox_1.addEventListener("selection-change", onSALES_TYSelectionChange);
				}
				container.addChild(comboBox_1, {
					"top": "10px",
					"left": "19px",
					"width": "100px",
					"height": "25px"
				});
				var inputBox_1 = new cpr.controls.InputBox("CLIENT_NM");
				inputBox_1.placeholder = "거래처명";
				container.addChild(inputBox_1, {
					"top": "10px",
					"left": "140px",
					"width": "112px",
					"height": "25px"
				});
				var inputBox_2 = new cpr.controls.InputBox("searchInput");
				inputBox_2.placeholder = "바코드/상품명/상품번호로 검색해주세요.";
				container.addChild(inputBox_2, {
					"top": "10px",
					"left": "263px",
					"width": "448px",
					"height": "25px"
				});
				var button_1 = new cpr.controls.Button();
				button_1.value = "조회";
				if(typeof onButtonClick3 == "function") {
					button_1.addEventListener("click", onButtonClick3);
				}
				container.addChild(button_1, {
					"top": "10px",
					"left": "905px",
					"width": "56px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "90px",
				"left": "20px",
				"width": "982px",
				"height": "50px"
			});
			
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("ea1");
			cpr.core.App.load("PosHeader", function(app) {
				if(app){
					embeddedApp_1.app = app;
				}
			});
			container.addChild(embeddedApp_1, {
				"top": "0px",
				"left": "0px",
				"width": "1024px",
				"height": "80px"
			});
			
			var radioButton_1 = new cpr.controls.RadioButton("cancelRadio");
			radioButton_1.value = "0";
			(function(radioButton_1){
				radioButton_1.setItemSet(app.lookup("cancelDs"), {
					"label": "label",
					"value": "value"
				})
			})(radioButton_1);
			if(typeof onCancelRadioSelectionChange == "function") {
				radioButton_1.addEventListener("selection-change", onCancelRadioSelectionChange);
			}
			container.addChild(radioButton_1, {
				"top": "150px",
				"left": "802px",
				"width": "200px",
				"height": "40px"
			});
			
			var pageIndexer_1 = new cpr.controls.PageIndexer();
			pageIndexer_1.init(1, 1, 1);
			container.addChild(pageIndexer_1, {
				"top": "721px",
				"left": "348px",
				"width": "332px",
				"height": "40px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyInit2 == "function"){
				app.addEventListener("init", onBodyInit2);
			}
		}
	});
	app.title = "PosProductList";
	cpr.core.Platform.INSTANCE.register(app);
})();
