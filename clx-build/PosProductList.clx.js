/*
 * App URI: PosProductList
 * Source Location: PosProductList.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4878), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("PosProductList", { 
		onPrepare: function(loader) {
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * POSSalesManagement.js
			 * Created at 2024. 1. 19. 오후 2:17:29.
			 *
			 * @author sunrise
			 ************************************************/

			/*
			 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit2(e){
				getProdCls();	
			}

			function getProdCls() {
				
			    // 서브미션 생성
			    var submission = new cpr.protocols.Submission();
			    
			    // 조회할 데이터의 URL 설정
			    submission.action = "/POS/GetInitDataProd.do"; 

			    // response data의 type 설정
			    submission.responseType = "javascript";

			    // 서버로 요청 전송
			    submission.send()
			    
			    submission.addEventListener("submit-success", function(e) {
				    var subMainList = e.control;
				    var jsonObj = JSON.parse(subMainList.xhr.responseText);
				    console.log(jsonObj);
				
				    // 상품분류 선택박스에 넣어주기 
				    var cmb1 = app.lookup("PROD_PERS_CD");
				
					var ds2 = app.lookup("prodCls");
					
				    // 가져온 JSON 데이터를 데이터셋에 설정
				    var dataList = jsonObj.productType; // 예시 데이터에서 salesData로 설정했다고 가정
				   
				    for (var i = 0; i < dataList.length; i++) {
				        var rowData = dataList[i];
				        
				        console.log(rowData);
				        
				        var newRow = ds2.addRow();
				        var lastIndex = ds2.getRowCount() - 1;
				        
				        // 각 항목에 대해 직접 설정
				        ds2.setValue(lastIndex, "label", rowData.PROD_CLS_NM);
				        ds2.setValue(lastIndex, "value", rowData.PROD_CLS_CD);	                        
				  	}
				});

			}

			/*
			 * 루트 컨테이너에서 load 이벤트 발생 시 호출.
			 * 앱이 최초 구성된후 최초 랜더링 직후에 발생하는 이벤트 입니다.
			 */
			function onBodyLoad(e){
				getProdList();
			}
				
			/*
			 * 서버로부터 데이터를 조회하여 그리드에 표시하는 함수
			 */
			function getProdList() {
			    var prodCls = null;
			    var searchInput = app.lookup("searchInput").value;
			    var clientNm = app.lookup("CLIENT_NM").value;
			    
			    // prodCls가 null이 아닌 경우에만 치환
			    if (app.lookup("PROD_PERS_CD").value !== null) {
			        // 원하는 치환 값으로 변경
			        prodCls = app.lookup("PROD_PERS_CD").value;
			    }
			    
			    console.log(prodCls);
			    console.log(searchInput);
			     
			    var requestData = {
			        "searchInput": searchInput.toString(),
			        "prodCls": prodCls !== null ? prodCls.toString() : null,
			        "clientNm": clientNm.toString()
			    };

			    var submission = new cpr.protocols.Submission();
			    submission.action = "/POS/GetProdData.do";
			    submission.responseType = "javascript";
			    submission.setRequestObject(requestData);
			    submission.send();
			    
			    submission.addEventListener("submit-success", function(e) {
			        var subMainList = e.control;
			        var jsonObj = JSON.parse(subMainList.xhr.responseText);
			        console.log(jsonObj);
			    
			        var productData = jsonObj["productData"];    
			    
			        // 가져온 데이터를 그리드에 표시하기
			        var grd1 = app.lookup("grd1");
			    
			        // 데이터셋 설정
			        var ds2 = app.lookup("ds2");
			        ds2.clear(); // 기존 데이터 모두 삭제
			    
			        // 가져온 JSON 데이터를 데이터셋에 설정
			       
			        for (var i = 0; i < productData.length; i++) {
			            var rowData = productData[i];
			            
			            console.log(rowData);
			            
			            var newRow = ds2.addRow();
			            var lastIndex = ds2.getRowCount() - 1;
			            
			            // 각 항목에 대해 직접 설정
			            ds2.setValue(lastIndex, "PROD_CD", rowData.PROD_CD);
			            ds2.setValue(lastIndex, "PROD_CLS_NM", rowData.PROD_CLS_NM);
			            ds2.setValue(lastIndex, "PROD_NM", rowData.PROD_NM);
			            ds2.setValue(lastIndex, "SELL_PR", rowData.SELL_PR);
			            ds2.setValue(lastIndex, "BAR_CODE", rowData.BAR_CODE);  
			            ds2.setValue(lastIndex, "CLIENT_NM", rowData.CLIENT_NM);               
			        }
			    
			    });    
			}


			/*
			 * "등록" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(e){
				var button = e.control;
				var page = "/POS/PosProductRegist1.do";
				window.location.href = page;
			}

			/*
			 * "조회" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(e){
				var button = e.control;
				getProdList();
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("prodCls");
			dataSet_1.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"}
				],
				"rows": [{"label": "전체", "value": ""}]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("ds1");
			dataSet_2.parseData({
				"columns": [
					{"name": "BAR_CODE"},
					{"name": "TRANS_TY"},
					{"name": "PROD_NM"},
					{"name": "SALES_PR"},
					{"name": "QTY"},
					{
						"name": "TOTAL_PR",
						"dataType": "expression",
						"displayOnly": true,
						"expression": "(QTY*SALES_PR)"
					},
					{"name": "SALE_AMT"},
					{"name": "VAT"},
					{"name": "SALES_AMT"},
					{"name": "POINT"},
					{"name": "SER_NO"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("ds2");
			dataSet_3.parseData({
				"columns": [
					{
						"name": "PROD_CD",
						"dataType": "string"
					},
					{"name": "PROD_CLS_NM"},
					{"name": "PROD_NM"},
					{"name": "SELL_PR"},
					{"name": "BAR_CODE"},
					{"name": "CLIENT_NM"},
					{"name": "CLIENT_NO"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("saleTy");
			dataSet_4.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"}
				],
				"rows": [
					{"label": "현금", "value": "1"},
					{"label": "카드", "value": "2"}
				]
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("cancelTy");
			dataSet_5.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"}
				],
				"rows": [
					{"label": "취소", "value": "1"},
					{"label": "판매", "value": "2"}
				]
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("cancelDs");
			dataSet_6.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"}
				],
				"rows": [
					{"label": "전체", "value": "0"},
					{"label": "판매", "value": "2"},
					{"label": "취소", "value": "1"}
				]
			});
			app.register(dataSet_6);
			var submission_1 = new cpr.protocols.Submission("sms1");
			submission_1.addResponseData(dataSet_3, false);
			app.register(submission_1);
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var hTMLSnippet_1 = new cpr.controls.HTMLSnippet();
			hTMLSnippet_1.value = "전표 내역";
			hTMLSnippet_1.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "1px",
				"color" : "white",
				"border-right-width" : "1px",
				"vertical-align" : "middle",
				"border-left-width" : "1px",
				"border-top-style" : "solid",
				"background-color" : "black",
				"border-radius" : "25px",
				"border-left-style" : "solid",
				"border-bottom-width" : "1px",
				"border-bottom-style" : "solid",
				"text-align" : "center"
			});
			container.addChild(hTMLSnippet_1, {
				"top": "150px",
				"left": "20px",
				"width": "100px",
				"height": "25px"
			});
			
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("ds2"),
				"showDeletedRow": false,
				"columns": [
					{"width": "84px"},
					{"width": "94px"},
					{"width": "139px"},
					{"width": "74px"},
					{"width": "112px"},
					{"width": "100px"},
					{
						"width": "100px",
						"visible": false
					}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "PROD_CD";
								cell.text = "상품코드";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "PROD_CLS_NM";
								cell.text = "상품분류";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "PROD_NM";
								cell.text = "상품명";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "BAR_CODE";
								cell.text = "판매가";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "BAR_CODE";
								cell.text = "바코드";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.targetColumnName = "CLIENT_NM";
								cell.text = "거래처명";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.targetColumnName = "CLIENT_NO";
								cell.text = "CLIENT_NO";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnName = "PROD_CD";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "PROD_CLS_NM";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "PROD_NM";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "SELL_PR";
								cell.control = (function(){
									var numberEditor_1 = new cpr.controls.NumberEditor("nbe1");
									numberEditor_1.readOnly = true;
									numberEditor_1.style.css({
										"text-align" : "center"
									});
									numberEditor_1.bind("value").toDataColumn("SELL_PR");
									return numberEditor_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.columnName = "BAR_CODE";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.columnName = "CLIENT_NM";
								cell.control = (function(){
									var output_1 = new cpr.controls.Output();
									output_1.style.css({
										"text-align" : "center"
									});
									output_1.bind("value").toDataColumn("CLIENT_NM");
									return output_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.columnName = "CLIENT_NO";
								cell.control = (function(){
									var output_2 = new cpr.controls.Output();
									output_2.bind("value").toDataColumn("CLIENT_NO");
									return output_2;
								})();
							}
						}
					]
				}
			});
			grid_1.style.css({
				"text-align" : "center"
			});
			if(typeof onGrd1SelectionChange == "function") {
				grid_1.addEventListener("selection-change", onGrd1SelectionChange);
			}
			if(typeof onGrd1RowRadioSelected == "function") {
				grid_1.addEventListener("row-radio-selected", onGrd1RowRadioSelected);
			}
			if(typeof onGrd1Insert == "function") {
				grid_1.addEventListener("insert", onGrd1Insert);
			}
			container.addChild(grid_1, {
				"top": "190px",
				"left": "20px",
				"width": "982px",
				"height": "371px"
			});
			
			var group_1 = new cpr.controls.Container();
			group_1.style.css({
				"background-color" : "#E0E0E0"
			});
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var comboBox_1 = new cpr.controls.ComboBox("PROD_PERS_CD");
				comboBox_1.preventInput = true;
				(function(comboBox_1){
					comboBox_1.setItemSet(app.lookup("prodCls"), {
						"label": "label",
						"value": "value"
					});
				})(comboBox_1);
				if(typeof onSALES_TYSelectionChange == "function") {
					comboBox_1.addEventListener("selection-change", onSALES_TYSelectionChange);
				}
				container.addChild(comboBox_1, {
					"top": "10px",
					"left": "19px",
					"width": "100px",
					"height": "25px"
				});
				var inputBox_1 = new cpr.controls.InputBox("CLIENT_NM");
				inputBox_1.placeholder = "거래처명";
				container.addChild(inputBox_1, {
					"top": "10px",
					"left": "140px",
					"width": "112px",
					"height": "25px"
				});
				var inputBox_2 = new cpr.controls.InputBox("searchInput");
				inputBox_2.placeholder = "바코드/상품명/상품번호로 검색해주세요.";
				container.addChild(inputBox_2, {
					"top": "10px",
					"left": "263px",
					"width": "448px",
					"height": "25px"
				});
				var button_1 = new cpr.controls.Button();
				button_1.value = "조회";
				if(typeof onButtonClick2 == "function") {
					button_1.addEventListener("click", onButtonClick2);
				}
				container.addChild(button_1, {
					"top": "10px",
					"left": "905px",
					"width": "56px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "90px",
				"left": "20px",
				"width": "982px",
				"height": "50px"
			});
			
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("ea1");
			cpr.core.App.load("PosHeader", function(app) {
				if(app){
					embeddedApp_1.app = app;
				}
			});
			container.addChild(embeddedApp_1, {
				"top": "0px",
				"left": "0px",
				"width": "1024px",
				"height": "80px"
			});
			
			var pageIndexer_1 = new cpr.controls.PageIndexer();
			pageIndexer_1.init(1, 1, 1);
			container.addChild(pageIndexer_1, {
				"top": "598px",
				"left": "326px",
				"width": "332px",
				"height": "40px"
			});
			
			var button_2 = new cpr.controls.Button();
			button_2.value = "등록";
			if(typeof onButtonClick == "function") {
				button_2.addEventListener("click", onButtonClick);
			}
			container.addChild(button_2, {
				"top": "155px",
				"left": "946px",
				"width": "56px",
				"height": "25px"
			});
			if(typeof onBodyLoad == "function"){
				app.addEventListener("load", onBodyLoad);
			}
			if(typeof onBodyInit2 == "function"){
				app.addEventListener("init", onBodyInit2);
			}
		}
	});
	app.title = "PosProductList";
	cpr.core.Platform.INSTANCE.register(app);
})();
