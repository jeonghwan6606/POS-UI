/*
 * App URI: PosSalesManagement
 * Source Location: PosSalesManagement.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4878), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("PosSalesManagement", { 
		onPrepare: function(loader) {
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * POSSalesManagement.js
			 * Created at 2024. 1. 19. 오후 2:17:29.
			 *
			 * @author sunrise
			 ************************************************/


			/*
			 * 루트 컨테이너에서 init 이벤트 발생 시 호출.
			 * 앱이 최초 구성될 때 발생하는 이벤트 입니다.
			 */
			function onBodyInit(e){
				
				var cmb1 = app.lookup("SALES_TY");
				cmb1.selectItem(0);
				
				var date = new Date();
			    var yar = date.getFullYear().toString();
			    var mon = date.getMonth() +1;
			    mon = mon.toString().length === 1 ? "0" + mon.toString() : mon.toString();
			    var day = date.getDate();
			    day = day.toString().length === 1 ? "0" + day.toString() : day.toString();
			    var hur = date.getHours();
			    hur = hur.toString().length === 1 ? "0" +hur.toString() : hur.toString();
			    var hur2 = date.getHours()-1;
			    hur2 = hur2.toString().length === 1 ? "0" +hur2.toString() : hur2.toString();
				var min = date.getMinutes();
			    min = min.toString().length === 1 ? "0" +min.toString() : min.toString();
			    var time = yar + '-' + mon + '-' + day +  ', ' + hur + ':' + min;
			    var time2 = yar + '-' + mon + '-' + day +  ', ' + hur2 + ':' + min;
			    
			    app.lookup("transStart").value = time2;
			    app.lookup("transEnd").value = time;
			}

			/*
			 * 그리드에서 cell-click 이벤트 발생 시 호출.
			 * Grid의 Cell 클릭시 발생하는 이벤트.
			 */
			function onGrd1CellClick(e){
				var grd1 = app.lookup("grd1");
				
				var sel = grd1.getCheckRowIndices("SALES_AMT");
				
				
				
			}


			/*
			 * "조회" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(e) {
			    var button = e.control;
				searchSaleList();

			}

			function searchSaleList(){
				    // 입력된 값들을 가져옵니다.
				    
				 TotalReset();	
				 var cancelTy = app.lookup("cancelRadio");
				 cancelTy.value = "0";   
				     
			    var phNo = app.lookup("HDP_NO").value;
			    var barcode = app.lookup("BAR_CODE").value;
			    var salesTy = app.lookup("SALES_TY").value;

			    // 날짜와 시간 값을 가져옵니다.
			    var transStart = app.lookup("transStart").value;
			    var transEnd = app.lookup("transEnd").value;

			    // 변환된 날짜와 시간 값을 저장할 변수를 초기화합니다.
			    var convertedTransStart = "";
			    var convertedTransEnd = "";

			    // 날짜 및 시간 값이 있는지 확인하고, 값이 있다면 변환합니다.
			    if (transStart) {
			        var dateTimeStart = convertDateTime(transStart);
			        convertedTransStart = dateTimeStart.datePart;
			        var convertedTimeStart = dateTimeStart.timePart;
			    }
			    if (transEnd) {
			        var dateTimeEnd = convertDateTime(transEnd);
			        convertedTransEnd = dateTimeEnd.datePart;
			        var convertedTimeEnd = dateTimeEnd.timePart;
			    }

			    // 서버로 전송할 데이터를 객체로 정의합니다.
			    var requestData = {
			        "phNo": phNo.toString(),
			        "barcode": barcode,
			        "salesTy": salesTy,
			        "transDtStart": convertedTransStart,
			        "transTmStart": convertedTimeStart,
			        "transDtEnd": convertedTransEnd,
			        "transTmEnd": convertedTimeEnd
			    };

			    // 서브미션 생성
			    var submission = new cpr.protocols.Submission();

			    // 전송할 URL 설정
			    submission.action = "/POS/GetSalesData.do";

			    // response data의 type 설정
			    submission.responseType = "javascript";

			    // 서버로 전송할 데이터를 설정합니다.
			    submission.setRequestObject(requestData);

			    // 서브미션 전송
			    submission.send();
			    
			    submission.addEventListener("submit-success", function(e) {
				    var subMainList = e.control;
				    var jsonObj = JSON.parse(subMainList.xhr.responseText);
				    console.log(jsonObj);
				
				    // 가져온 데이터를 그리드에 표시하기
				    var grd1 = app.lookup("grd1");
				
				    // 데이터셋 설정
				    var ds2 = app.lookup("ds2");
				    ds2.clear(); // 기존 데이터 모두 삭제
				
				    // 가져온 JSON 데이터를 데이터셋에 설정
				    var dataList = jsonObj.salesData; // 예시 데이터에서 salesData로 설정했다고 가정
				    for (var i = 0; i < dataList.length; i++) {
				        var rowData = dataList[i];
				        
				        console.log(rowData);
				        
				        // TRANS_TY가 3이면 건너뜁니다.
					    //if (rowData.TRANS_TY === '3') {
					     //   continue;
					   // }
				        
				        var newRow = ds2.addRow();
				        var lastIndex = ds2.getRowCount() - 1;
				        
				        // 각 항목에 대해 직접 설정
				        ds2.setValue(lastIndex, "SALES_SER_NO", rowData.SALES_SER_NO);
				        // MEMB_SER_NO가 공백이면 "비회원"으로 설정
						if (rowData.MEMB_SER_NO.trim() === '') {
						    ds2.setValue(lastIndex, "MEMB_SER_NO", "비회원");
						} else {
						    ds2.setValue(lastIndex, "MEMB_SER_NO", rowData.MEMB_SER_NO);
						}
				        // CANC_TY 값에 따라 조건부로 설정
						if (rowData.CANC_TY === '1') {
						    ds2.setValue(lastIndex, "CANC_TY", rowData.CANC_TY);
							grd1.setRowState(lastIndex, cpr.data.tabledata.RowState.UNCHANGED);
						} else {
						    ds2.setValue(lastIndex, "CANC_TY", '2');
						}
				        ds2.setValue(lastIndex, "SALES_AMT", rowData.TOTAL_SALES_AMT);
				        ds2.setValue(lastIndex, "SALES_TY", rowData.SALES_TY);
				        
				        // TRANS_DT와 TRANS_TM 합치기
				        var transDateTime = rowData.TRANS_DT + " " + rowData.TRANS_TM;
				        ds2.setValue(lastIndex, "TRANS_TM", transDateTime);
				        
				         
				    }
				
				});
				
				// 그리드 새로고침
				//grd1.redraw();
				  var grd2 = app.lookup("grd2");
				  var rowCount = grd2.getRowCount() // 그리드의 행 수를 가져옵니다.
				    
				  console.log(rowCount);
				  for (var i = rowCount - 1; i >= 0; i--) {
				        grd2.deleteRow(i); // 각 행을 삭제합니다.
				   }
				   
				   
			}

			// YYYY-MM-DD, HH:mm 형식의 문자열을 YYYYMMDDHHmm 형식으로 변환하는 함수
			function convertDateTime(dateTimeStr) {
			    // 구분자를 제거하고 숫자만 남깁니다.
			    var numbersOnly = dateTimeStr.replace(/\D/g, '');

			    // 문자열을 날짜와 시간으로 분리합니다.
			    var datePart = numbersOnly.substring(0, 8); // YYYYMMDD
			    var timePart = numbersOnly.substring(8);    // HHmm

			    // YYYYMMDDHHmm 형식으로 조합하여 반환합니다.
			    return {
			        "datePart": datePart,
			        "timePart": timePart
			    };
			}



			/*
			 * 그리드에서 row-radio-selected 이벤트 발생 시 호출.
			 * Grid의 행 선택 컬럼(columnType=radio)이 선택 되었을 때 발생하는 이벤트.
			 */
			function onGrd1RowRadioSelected(e){
			    var grd1 = app.lookup("grd1");
			    var selectedRow = grd1.getSelectedRow(); // 선택된 행 가져오기
			    var salesSerNo = "";
			    var salesTy = "";
			    var salesAmt = "";
			    var outputTotal = app.lookup("total");
			    var outputCash = app.lookup("cash"); // 수정: outputCash 컨트롤 가져오기
			    var outputCard = app.lookup("card"); // 수정: outputCard 컨트롤 가져오기
			    
			    TotalReset();
			    
			    if (selectedRow) {
			        // 선택된 행에서 판매 일련 번호 가져오기
			        salesSerNo = selectedRow.getValue("SALES_SER_NO");
			        salesTy = selectedRow.getValue("SALES_TY");
			        salesAmt = selectedRow.getValue("SALES_AMT");
			    }

				// 판매 구분이 1이면 outputTotal과 outputCash에 SALES_AMT 설정
				if (salesTy === "1") {
				    outputTotal.value = Number(salesAmt).toLocaleString();
				    outputCash.value = Number(salesAmt).toLocaleString(); // 수정: outputCash에 SALES_AMT 설정
				}
				// 판매 구분이 2이면 outputTotal과 outputCard에 SALES_AMT 설정
				else if (salesTy === "2") {
				    outputTotal.value = Number(salesAmt).toLocaleString();
				    outputCard.value = Number(salesAmt).toLocaleString(); // 수정: outputCard에 SALES_AMT 설정
				}

			    
			    // Submission 생성
			    var submission = new cpr.protocols.Submission();

			    // 전송할 URL 설정
			    submission.action = "/POS/GetSalesProduct.do"; // GetSalesProduct.do 로 변경

			    // response data의 type 설정
			    submission.responseType = "javascript"; // JSON 데이터를 받기 위해 javascript 설정

			   
				// 서버로 전송할 데이터를 설정합니다.
			    submission.setParameters("salesSerNo", salesSerNo);
			    submission.setParameters("salesTy", salesTy);
			    // 서브미션 전송
			    submission.send();

			    // 서브미션의 submit-success 이벤트 리스너 추가
			    submission.addEventListener("submit-success", function(e) {
				    var subMainList = e.control;
				    var jsonObj = JSON.parse(subMainList.xhr.responseText);
				    console.log(jsonObj);
				
				    // 가져온 데이터를 그리드에 표시하기
				    var grd2 = app.lookup("grd2");
				
				    // 데이터셋 설정
				    var ds1 = app.lookup("ds1");
				    ds1.clear(); // 기존 데이터 모두 삭제
				
				    // 가져온 JSON 데이터를 데이터셋에 설정
				    var dataList = jsonObj.salesProduct; // 예시 데이터에서 salesData로 설정했다고 가정
				    for (var i = 0; i < dataList.length; i++) {
				        var rowData = dataList[i];
				        
				        console.log(rowData);
				        
				        var newRow = ds1.addRow();
				        var lastIndex = ds1.getRowCount() - 1;
				        
				        // TRANS_TY가 3이면 해당 행의 checkbox 비활성화
				        // TRANS_TY가 3이면 해당 행의 checkbox 비활성화
					    if (rowData.TRANS_TY === "3") {
					        grd2.setEnabledTypedCell("checkbox", lastIndex, false);  
					        grd2.setRowState(lastIndex, cpr.data.tabledata.RowState.UNCHANGED);
					        
					        // rowIndex 컬럼에 "취소"라는 단어를 설정합니다.
					        ds1.setValue(lastIndex, "TRANS_TY", "취소");
					    } else {
					        // TRANS_TY가 3이 아닌 경우, 기존 로우 인덱스 값을 설정합니다.
					         ds1.setValue(lastIndex, "TRANS_TY", "일반");
					    }
				        
				        // 각 항목에 대해 직접 설정
				        ds1.setValue(lastIndex, "BAR_CODE", rowData.BAR_CODE);
				        ds1.setValue(lastIndex, "PROD_NM", rowData.PROD_NM);
				        ds1.setValue(lastIndex, "SALES_PR", rowData.SALES_PR);
				        ds1.setValue(lastIndex, "QTY", rowData.QTY);
				        ds1.setValue(lastIndex, "SALE_AMT", rowData.SALE_AMT);
				        //ds1.setValue(lastIndex, "VAT", rowData.VAT);
				        ds1.setValue(lastIndex, "SALES_AMT", rowData.SALES_AMT);
				        ds1.setValue(lastIndex, "POINT", rowData.POINT);
				        ds1.setValue(lastIndex, "SER_NO", rowData.SER_NO);
				    
				    	
				    } 
			        
				    // 그리드 새로고침
				    grd2.redraw();
				    
				});
			}


			/*
			 * "선택취소" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick(e){
			    var button = e.control;
			    var grd1 = app.lookup("grd1");
			    var grd2 = app.lookup("grd2");
			    var selectedRowIndices = grd2.getCheckRowIndices();
			   
			    var serNos = []; // 선택된 행의 일련 번호들 배열
			    var isFullCancel = false; // 전체 취소 여부
			   
			    // 그리드1
				var grd1 = app.lookup("grd1");
				var checkedRow = grd1.getRadioSelection(); // 체크된 행의 인덱스 배열 가져오기
				var salesSerNos = "";
				  
			    console.log(checkedRow);
			    if (checkedRow === -1) {
				    alert("선택된 판매목록이 없습니다.");
				    return;
				}
				
				if (selectedRowIndices.length === 0) {
				    alert("선택된 상품목록이 없습니다.");
				    return;
				}
				
			    var firstCheckedRow = grd1.getRow(checkedRow);
			    salesSerNos = firstCheckedRow.getValue("SALES_SER_NO");

				 
			    
			    // 확인 팝업 표시
			    if (!confirm("선택된 항목을 취소하시겠습니까?")) {
			        return; // 사용자가 취소를 선택한 경우 함수 종료
			    }
			    
			    console.log(selectedRowIndices);
			    // 선택된 행들의 판매 일련 번호와 일련 번호를 추출합니다.
			    for (var i = 0; i < selectedRowIndices.length; i++) {
			        var rowIndex = selectedRowIndices[i];
			        var selectedRow = grd2.getRow(rowIndex)
			        var rowData = selectedRow.getRowData();
			        console.log(rowData["PROD_NM"]);
			        console.log(rowData["SER_NO"]);
			        serNos.push(rowData["SER_NO"]);
			    }
			    
			    // 서버로 전송할 데이터를 객체로 정의합니다.
			    var requestData = {
			        "salesSerNos": salesSerNos.toString(),
			        "serNos": serNos,
			        "isFullCancel": isFullCancel // 전체 취소 여부를 false로 설정하여 선택 취소를 수행합니다.
			    };
			    
			    // Submission 생성
			    var submission = new cpr.protocols.Submission();
			    
			    // 전송할 URL 설정
			    submission.action = "/POS/cancelSales.do";
			    
			    // response data의 type 설정
			    submission.responseType = "javascript";
			    
			    
			    // 서버로 전송할 데이터를 설정합니다.
			    submission.setRequestObject(requestData);
			    
			    // 서브미션 전송
			    submission.send();
			    // 서브미션 성공 이벤트 핸들러 등록
			    submission.addEventListener("submit-success", function(event) {
			     
				    var sms1 = event.control;
				    
				    console.log(sms1.xhr.responseText);    
				    var jsonObj = JSON.parse(sms1.xhr.responseText);    
				    console.log(jsonObj);    
			       
			        var cancel = jsonObj.cancel;
			    	
			        console.log("Cancel:",cancel); 
			        
			        // cancel이 2이면 radio checked된 행 삭제
			        if (cancel === 2) {
			            // radio checked된 행 삭제
			            grd1.deleteRow(checkedRow);
			        }
			        
			        grd1.redraw();
			        
			    });
			    
			     alert("취소되었습니다.");
			     
			     var grd2 = app.lookup("grd2");
					  var rowCount = grd2.getRowCount() // 그리드의 행 수를 가져옵니다.
					    
					  console.log(rowCount);
					  for (var i = rowCount - 1; i >= 0; i--) {
					        grd2.deleteRow(i); // 각 행을 삭제합니다.
						}
				searchSaleList();
						
				TotalReset();			
			}

			/*
			 * "전체취소" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(e){
			    var button = e.control;
			    
			    // 그리드1
				var grd1 = app.lookup("grd1");
				var checkedRow = grd1.getRadioSelection(); // 체크된 행의 인덱스 배열 가져오기
				var salesSerNos = "";
				var serNos = []; // 선택된 행의 일련 번호들 배열
				  
			    console.log(checkedRow);
			    if (checkedRow === -1) {
				    alert("선택된 판매목록이 없습니다.");
				    return;
				}
				
				var firstCheckedRow = grd1.getRow(checkedRow);
			    var cancelType = firstCheckedRow.getValue("CANC_TY");
			    
			    if (cancelType === '1') {
			        alert("이미 취소된 영수증입니다.");
			        return;
			    }
				
				 // 확인 팝업 표시
			    if (!confirm("전체 항목을 취소하시겠습니까?")) {
			        return; // 사용자가 취소를 선택한 경우 함수 종료
			    }
			    
			    
			    
				var grd2 = app.lookup("grd2");
					grd2.checkAllRow();
			   	var selectedRowIndices = grd2.getCheckRowIndices();
			    
			    
			   for (var i = 0; i < selectedRowIndices.length; i++) {
			        var rowIndex = selectedRowIndices[i];
			        var selectedRow = grd2.getRow(rowIndex)
			        var rowData = selectedRow.getRowData();
			        console.log(rowData["PROD_NM"]);
			        console.log(rowData["SER_NO"]);
			        serNos.push(rowData["SER_NO"]);
			    }
			    
				
			    var firstCheckedRow = grd1.getRow(checkedRow);
			    salesSerNos = firstCheckedRow.getValue("SALES_SER_NO");
				    
			    
			    
			    // 전체 취소 여부를 true로 설정하여 전체 취소를 수행합니다.
			    var isFullCancel = true;
			    
			    // 서버로 전송할 데이터를 설정합니다.
			    var requestData = {
			        "salesSerNos": salesSerNos,
			        "serNos": serNos,
			        "isFullCancel": isFullCancel
			    };
			    
			    // Submission 생성
			    var submission = new cpr.protocols.Submission();
			    
			    // 전송할 URL 설정
			    submission.action = "/POS/cancelSales.do";
			    
			    // response data의 type 설정
			    submission.responseType = "text";
			    
			    // 서버로 전송할 데이터를 설정합니다.
			    submission.setRequestObject(requestData);
			    
			    // 서브미션 전송
			    submission.send();
			    
			    // 서브미션 성공 이벤트 핸들러 등록
			    submission.addEventListener("submit-success", function(event) {
			     
				    var sms1 = event.control;
				    
				    console.log(sms1.xhr.responseText);    
				    var jsonObj = JSON.parse(sms1.xhr.responseText);    
				    console.log(jsonObj);    
			       
			        var cancel = jsonObj.cancel;
			    	
			        console.log("Cancel:",cancel); 
			        
			        // cancel이 2이면 radio checked된 행 삭제
			        if (cancel === 2) {
			            // radio checked된 행 삭제
			            grd1.deleteRow(checkedRow);
			        }
			        
			    });
			     
			        
			    alert("취소되었습니다.");
			    
			          var grd2 = app.lookup("grd2");
					  var rowCount = grd2.getRowCount() // 그리드의 행 수를 가져옵니다.
					    
					  console.log(rowCount);
					  for (var i = rowCount - 1; i >= 0; i--) {
					        grd2.deleteRow(i); // 각 행을 삭제합니다.
					  }
				 searchSaleList();	  
				 TotalReset();	  
			}

			function TotalReset(){
				app.lookup("total").value = ""
				app.lookup("cash").value = ""; // null이면 공백 문자열로 대체
			    app.lookup("card").value = "";
			    app.lookup("gift").value = "";
			    app.lookup("point").value = "";
			}

			/*
			 * 라디오 버튼에서 selection-change 이벤트 발생 시 호출.
			 * 라디오버튼 아이템을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onCancelRadioSelectionChange(e){
				
				var cancelRadio = e.control;
			    var grd1 = app.lookup("grd1");
			    var cancelDs = app.lookup("cancelDs");
			    // 라디오 버튼의 선택값 가져오기
			    var cancelType = cancelRadio.value;
			    console.log(cancelType);
			    // 그리드 필터링
			    if (cancelType === "0") {
			        // 전체인 경우 모든 항목을 보여줍니다.
			        grd1.clearFilter();
			       
			    } else if (cancelType === "1") {
			        // 취소인 경우 CANC_TY가 1 또는 2인 항목만 보여줍니다.
			        grd1.setFilter("CANC_TY==1")
			    } else if (cancelType === "2") {
			        // 미취소인 경우 CANC_TY가 2인 항목만 보여줍니다.
			         grd1.setFilter("CANC_TY==2")
			    } 
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("판매구분");
			dataSet_1.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"}
				],
				"rows": [
					{"label": "전체", "value": ""},
					{"label": "현금", "value": "1"},
					{"label": "카드", "value": "2"}
				]
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("ds1");
			dataSet_2.parseData({
				"columns": [
					{"name": "BAR_CODE"},
					{"name": "TRANS_TY"},
					{"name": "PROD_NM"},
					{"name": "SALES_PR"},
					{"name": "QTY"},
					{
						"name": "TOTAL_PR",
						"dataType": "expression",
						"displayOnly": true,
						"expression": "(QTY*SALES_PR)"
					},
					{"name": "SALE_AMT"},
					{"name": "VAT"},
					{"name": "SALES_AMT"},
					{"name": "POINT"},
					{"name": "SER_NO"}
				],
				"rows": []
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("ds2");
			dataSet_3.parseData({
				"columns": [
					{
						"name": "SALES_SER_NO",
						"dataType": "string"
					},
					{"name": "CANC_TY"},
					{"name": "MEMB_SER_NO"},
					{"name": "SALES_AMT"},
					{"name": "SALES_TY"},
					{"name": "TRANS_TM"}
				],
				"rows": []
			});
			app.register(dataSet_3);
			
			var dataSet_4 = new cpr.data.DataSet("saleTy");
			dataSet_4.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"}
				],
				"rows": [
					{"label": "현금", "value": "1"},
					{"label": "카드", "value": "2"}
				]
			});
			app.register(dataSet_4);
			
			var dataSet_5 = new cpr.data.DataSet("cancelTy");
			dataSet_5.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"}
				],
				"rows": [
					{"label": "취소", "value": "1"},
					{"label": "판매", "value": "2"}
				]
			});
			app.register(dataSet_5);
			
			var dataSet_6 = new cpr.data.DataSet("cancelDs");
			dataSet_6.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"}
				],
				"rows": [
					{"label": "전체", "value": "0"},
					{"label": "판매", "value": "2"},
					{"label": "취소", "value": "1"}
				]
			});
			app.register(dataSet_6);
			var submission_1 = new cpr.protocols.Submission("sms1");
			submission_1.addResponseData(dataSet_3, false);
			app.register(submission_1);
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.style.css({
				"width" : "100%",
				"height" : "100%"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var hTMLSnippet_1 = new cpr.controls.HTMLSnippet();
			hTMLSnippet_1.value = "전표 내역";
			hTMLSnippet_1.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "1px",
				"color" : "white",
				"border-right-width" : "1px",
				"vertical-align" : "middle",
				"border-left-width" : "1px",
				"border-top-style" : "solid",
				"background-color" : "black",
				"border-radius" : "25px",
				"border-left-style" : "solid",
				"border-bottom-width" : "1px",
				"border-bottom-style" : "solid",
				"text-align" : "center"
			});
			container.addChild(hTMLSnippet_1, {
				"top": "150px",
				"left": "20px",
				"width": "100px",
				"height": "25px"
			});
			
			var hTMLSnippet_2 = new cpr.controls.HTMLSnippet();
			hTMLSnippet_2.value = "상품 내역";
			hTMLSnippet_2.style.css({
				"border-right-style" : "solid",
				"border-top-width" : "1px",
				"color" : "white",
				"border-right-width" : "1px",
				"vertical-align" : "middle",
				"border-left-width" : "1px",
				"border-top-style" : "solid",
				"background-color" : "black",
				"border-radius" : "25px",
				"border-left-style" : "solid",
				"border-bottom-width" : "1px",
				"border-bottom-style" : "solid",
				"text-align" : "center"
			});
			container.addChild(hTMLSnippet_2, {
				"top": "550px",
				"left": "20px",
				"width": "100px",
				"height": "25px"
			});
			
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("ds2"),
				"showDeletedRow": false,
				"columns": [
					{"width": "25px"},
					{"width": "47px"},
					{"width": "84px"},
					{"width": "94px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "146px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "CANC_TY";
								cell.text = "구분";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "SALES_SER_NO";
								cell.text = "판매일련번호";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "MEMB_SER_NO";
								cell.text = "회원번호";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "SALES_AMT";
								cell.text = "판매금액";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "SALES_TY";
								cell.text = "판매구분";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "TRANS_TM";
								cell.text = "거래시간";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnType = "radio";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "CANC_TY";
								cell.style.css({
									"text-align" : "center"
								});
								cell.control = (function(){
									var comboBox_1 = new cpr.controls.ComboBox("cmb2");
									comboBox_1.readOnly = true;
									comboBox_1.style.css({
										"text-align" : "center"
									});
									(function(comboBox_1){
										comboBox_1.setItemSet(app.lookup("cancelTy"), {
											"label": "label",
											"value": "value"
										});
									})(comboBox_1);
									comboBox_1.bind("value").toDataColumn("CANC_TY");
									return comboBox_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "SALES_SER_NO";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "MEMB_SER_NO";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.columnName = "SALES_AMT";
								cell.control = (function(){
									var numberEditor_1 = new cpr.controls.NumberEditor("nbe1");
									numberEditor_1.readOnly = true;
									numberEditor_1.format = "s#,##0";
									numberEditor_1.bind("value").toDataColumn("SALES_AMT");
									return numberEditor_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.columnName = "SALES_TY";
								cell.control = (function(){
									var comboBox_2 = new cpr.controls.ComboBox("cmb1");
									comboBox_2.readOnly = true;
									(function(comboBox_2){
										comboBox_2.setItemSet(app.lookup("saleTy"), {
											"label": "label",
											"value": "value"
										});
									})(comboBox_2);
									comboBox_2.bind("value").toDataColumn("SALES_TY");
									return comboBox_2;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.columnName = "TRANS_TM";
								cell.control = (function(){
									var dateInput_1 = new cpr.controls.DateInput("dti1");
									dateInput_1.readOnly = true;
									dateInput_1.mask = "YYYY-MM-DD HH:mm";
									dateInput_1.format = "YYYYMMDDHHmmss";
									dateInput_1.bind("value").toDataColumn("TRANS_TM");
									return dateInput_1;
								})();
							}
						}
					]
				}
			});
			grid_1.style.css({
				"text-align" : "center"
			});
			if(typeof onGrd1SelectionChange == "function") {
				grid_1.addEventListener("selection-change", onGrd1SelectionChange);
			}
			if(typeof onGrd1RowRadioSelected == "function") {
				grid_1.addEventListener("row-radio-selected", onGrd1RowRadioSelected);
			}
			if(typeof onGrd1Insert == "function") {
				grid_1.addEventListener("insert", onGrd1Insert);
			}
			container.addChild(grid_1, {
				"top": "190px",
				"left": "20px",
				"width": "719px",
				"height": "351px"
			});
			
			var group_1 = new cpr.controls.Container();
			group_1.style.css({
				"background-color" : "#E0E0E0"
			});
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var comboBox_3 = new cpr.controls.ComboBox("SALES_TY");
				comboBox_3.preventInput = true;
				(function(comboBox_3){
					comboBox_3.setItemSet(app.lookup("판매구분"), {
						"label": "label",
						"value": "value"
					});
				})(comboBox_3);
				if(typeof onSALES_TYSelectionChange == "function") {
					comboBox_3.addEventListener("selection-change", onSALES_TYSelectionChange);
				}
				container.addChild(comboBox_3, {
					"top": "10px",
					"left": "19px",
					"width": "100px",
					"height": "25px"
				});
				var inputBox_1 = new cpr.controls.InputBox("HDP_NO");
				inputBox_1.placeholder = "전화번호";
				container.addChild(inputBox_1, {
					"top": "10px",
					"left": "140px",
					"width": "112px",
					"height": "25px"
				});
				var inputBox_2 = new cpr.controls.InputBox("BAR_CODE");
				inputBox_2.placeholder = "바코드";
				container.addChild(inputBox_2, {
					"top": "10px",
					"left": "263px",
					"width": "130px",
					"height": "25px"
				});
				var dateInput_2 = new cpr.controls.DateInput("transStart");
				dateInput_2.value = "";
				dateInput_2.placeholder = "YYYY-MM-DD HH:mm";
				dateInput_2.mask = "YYYY-MM-DD HH:mm";
				dateInput_2.format = "YYYYMMDDHHmm";
				container.addChild(dateInput_2, {
					"top": "10px",
					"left": "403px",
					"width": "199px",
					"height": "25px"
				});
				var output_1 = new cpr.controls.Output();
				output_1.value = "~";
				output_1.style.css({
					"text-align" : "center"
				});
				container.addChild(output_1, {
					"top": "10px",
					"left": "612px",
					"width": "25px",
					"height": "25px"
				});
				var dateInput_3 = new cpr.controls.DateInput("transEnd");
				dateInput_3.value = "";
				dateInput_3.placeholder = "YYYY-MM-DD HH:mm";
				dateInput_3.mask = "YYYY-MM-DD HH:mm";
				dateInput_3.format = "YYYYMMDDHHmm";
				container.addChild(dateInput_3, {
					"top": "10px",
					"left": "647px",
					"width": "199px",
					"height": "25px"
				});
				var button_1 = new cpr.controls.Button();
				button_1.value = "조회";
				if(typeof onButtonClick3 == "function") {
					button_1.addEventListener("click", onButtonClick3);
				}
				container.addChild(button_1, {
					"top": "10px",
					"left": "905px",
					"width": "56px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "90px",
				"left": "20px",
				"width": "982px",
				"height": "50px"
			});
			
			var grid_2 = new cpr.controls.Grid("grd2");
			grid_2.init({
				"dataSet": app.lookup("ds1"),
				"showDeletedRow": false,
				"columns": [
					{"width": "25px"},
					{"width": "56px"},
					{"width": "87px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{
						"width": "100px",
						"visible": false
					}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnType = "checkbox";
								cell.filterable = false;
								cell.sortable = false;
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "TRANS_TY";
								cell.text = "구분";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "BAR_CODE";
								cell.text = "바코드";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "PROD_NM";
								cell.text = "상품명";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "SALES_PR";
								cell.text = "판매단가";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "QTY";
								cell.text = "수량";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "SALE_AMT";
								cell.text = "판매가격";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 7},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "VAT";
								cell.text = "할인금액";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 8},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "SALES_AMT";
								cell.text = "판매금액";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 9},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "POINT";
								cell.text = "포인트";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 10},
							"configurator": function(cell){
								cell.text = "SER_NO";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnType = "checkbox";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "TRANS_TY";
								cell.columnType = "normal";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "BAR_CODE";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "PROD_NM";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.columnName = "SALES_PR";
								cell.control = (function(){
									var numberEditor_2 = new cpr.controls.NumberEditor("nbe5");
									numberEditor_2.readOnly = true;
									numberEditor_2.bind("value").toDataColumn("SALES_PR");
									return numberEditor_2;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.columnName = "QTY";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.columnName = "TOTAL_PR";
								cell.control = (function(){
									var numberEditor_3 = new cpr.controls.NumberEditor("nbe2");
									numberEditor_3.readOnly = true;
									numberEditor_3.bind("value").toDataColumn("TOTAL_PR");
									return numberEditor_3;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 7},
							"configurator": function(cell){
								cell.columnName = "SALE_AMT";
								cell.control = (function(){
									var numberEditor_4 = new cpr.controls.NumberEditor("SALE_AMT");
									numberEditor_4.readOnly = true;
									numberEditor_4.bind("value").toDataColumn("SALE_AMT");
									return numberEditor_4;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 8},
							"configurator": function(cell){
								cell.columnName = "SALES_AMT";
								cell.control = (function(){
									var numberEditor_5 = new cpr.controls.NumberEditor("nbe3");
									numberEditor_5.readOnly = true;
									numberEditor_5.bind("value").toDataColumn("SALES_AMT");
									return numberEditor_5;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 9},
							"configurator": function(cell){
								cell.columnName = "POINT";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 10},
							"configurator": function(cell){
								cell.columnName = "SER_NO";
								cell.control = (function(){
									var output_2 = new cpr.controls.Output("SER_NO");
									output_2.bind("value").toDataColumn("SER_NO");
									return output_2;
								})();
							}
						}
					]
				}
			});
			if(typeof onGrd2RowCheck == "function") {
				grid_2.addEventListener("row-check", onGrd2RowCheck);
			}
			container.addChild(grid_2, {
				"top": "585px",
				"left": "20px",
				"width": "981px",
				"height": "161px"
			});
			
			var group_2 = new cpr.controls.Container();
			var xYLayout_3 = new cpr.controls.layouts.XYLayout();
			group_2.setLayout(xYLayout_3);
			(function(container){
				var hTMLSnippet_3 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_3.value = "판매 금액";
				hTMLSnippet_3.style.css({
					"border-right-style" : "solid",
					"border-top-width" : "1px",
					"color" : "white",
					"border-right-width" : "1px",
					"vertical-align" : "middle",
					"border-left-width" : "1px",
					"border-top-style" : "solid",
					"background-color" : "black",
					"border-radius" : "25px",
					"border-left-style" : "solid",
					"border-bottom-width" : "1px",
					"border-bottom-style" : "solid",
					"text-align" : "center"
				});
				container.addChild(hTMLSnippet_3, {
					"top": "11px",
					"left": "9px",
					"width": "100px",
					"height": "25px"
				});
				var output_3 = new cpr.controls.Output();
				output_3.value = "구분";
				output_3.style.css({
					"border-right-style" : "solid",
					"border-top-width" : "1px",
					"border-bottom-color" : "#cccccc",
					"border-right-width" : "1px",
					"vertical-align" : "middle",
					"border-left-color" : "#cccccc",
					"border-right-color" : "#cccccc",
					"border-left-width" : "1px",
					"border-top-style" : "solid",
					"background-color" : "#ededed",
					"border-radius" : "10px 0px 0px 0px",
					"border-left-style" : "solid",
					"border-bottom-width" : "1px",
					"border-top-color" : "#cccccc",
					"border-bottom-style" : "solid",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(output_3, {
					"top": "46px",
					"left": "9px",
					"width": "70px",
					"height": "55px"
				});
				var output_4 = new cpr.controls.Output();
				output_4.value = "전체";
				output_4.style.css({
					"border-right-style" : "solid",
					"border-top-width" : "1px",
					"border-bottom-color" : "#cccccc",
					"border-right-width" : "1px",
					"vertical-align" : "middle",
					"border-left-color" : "#cccccc",
					"border-right-color" : "#cccccc",
					"border-left-width" : "1px",
					"border-top-style" : "solid",
					"background-color" : "#ededed",
					"border-radius" : "0px 0px 0px 0px",
					"border-left-style" : "solid",
					"border-bottom-width" : "1px",
					"border-top-color" : "#cccccc",
					"border-bottom-style" : "solid",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(output_4, {
					"top": "100px",
					"left": "9px",
					"width": "70px",
					"height": "60px"
				});
				var output_5 = new cpr.controls.Output();
				output_5.value = "현금";
				output_5.style.css({
					"border-right-style" : "solid",
					"border-top-width" : "1px",
					"border-bottom-color" : "#cccccc",
					"border-right-width" : "1px",
					"vertical-align" : "middle",
					"border-left-color" : "#cccccc",
					"border-right-color" : "#cccccc",
					"border-left-width" : "1px",
					"border-top-style" : "solid",
					"background-color" : "#ededed",
					"border-radius" : "0px 0px 0px 0px",
					"border-left-style" : "solid",
					"border-bottom-width" : "1px",
					"border-top-color" : "#cccccc",
					"border-bottom-style" : "solid",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(output_5, {
					"top": "159px",
					"left": "9px",
					"width": "70px",
					"height": "60px"
				});
				var output_6 = new cpr.controls.Output();
				output_6.value = "카드";
				output_6.style.css({
					"border-right-style" : "solid",
					"border-top-width" : "1px",
					"border-bottom-color" : "#cccccc",
					"border-right-width" : "1px",
					"vertical-align" : "middle",
					"border-left-color" : "#cccccc",
					"border-right-color" : "#cccccc",
					"border-left-width" : "1px",
					"border-top-style" : "solid",
					"background-color" : "#ededed",
					"border-radius" : "0px 0px 0px 0px",
					"border-left-style" : "solid",
					"border-bottom-width" : "1px",
					"border-top-color" : "#cccccc",
					"border-bottom-style" : "solid",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(output_6, {
					"top": "277px",
					"left": "9px",
					"width": "70px",
					"height": "60px"
				});
				var output_7 = new cpr.controls.Output();
				output_7.value = "상품권";
				output_7.style.css({
					"border-right-style" : "solid",
					"border-top-width" : "1px",
					"border-bottom-color" : "#cccccc",
					"border-right-width" : "1px",
					"vertical-align" : "middle",
					"border-left-color" : "#cccccc",
					"border-right-color" : "#cccccc",
					"border-left-width" : "1px",
					"border-top-style" : "solid",
					"background-color" : "#ededed",
					"border-radius" : "0px 0px 0px 0px",
					"border-left-style" : "solid",
					"border-bottom-width" : "1px",
					"border-top-color" : "#cccccc",
					"border-bottom-style" : "solid",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(output_7, {
					"top": "218px",
					"left": "9px",
					"width": "70px",
					"height": "60px"
				});
				var output_8 = new cpr.controls.Output();
				output_8.value = "포인트";
				output_8.style.css({
					"border-right-style" : "solid",
					"border-top-width" : "1px",
					"border-bottom-color" : "#cccccc",
					"border-right-width" : "1px",
					"vertical-align" : "middle",
					"border-left-color" : "#cccccc",
					"border-right-color" : "#cccccc",
					"border-left-width" : "1px",
					"border-top-style" : "solid",
					"background-color" : "#ededed",
					"border-radius" : "0px 0px 0px 10px",
					"border-left-style" : "solid",
					"border-bottom-width" : "1px",
					"border-top-color" : "#cccccc",
					"border-bottom-style" : "solid",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(output_8, {
					"top": "336px",
					"left": "9px",
					"width": "70px",
					"height": "60px"
				});
				var output_9 = new cpr.controls.Output();
				output_9.value = "합계";
				output_9.style.css({
					"border-right-style" : "solid",
					"border-top-width" : "1px",
					"border-bottom-color" : "#cccccc",
					"border-right-width" : "1px",
					"border-left-color" : "#cccccc",
					"border-right-color" : "#cccccc",
					"border-left-width" : "1px",
					"border-top-style" : "solid",
					"background-color" : "#ededed",
					"border-left-style" : "solid",
					"border-bottom-width" : "1px",
					"border-top-color" : "#cccccc",
					"border-bottom-style" : "solid",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(output_9, {
					"top": "46px",
					"left": "78px",
					"width": "130px",
					"height": "55px"
				});
				var output_10 = new cpr.controls.Output("total");
				output_10.readOnly = true;
				output_10.value = "";
				output_10.style.css({
					"border-right-style" : "solid",
					"border-top-width" : "1px",
					"border-bottom-color" : "#cccccc",
					"border-right-width" : "1px",
					"border-left-color" : "#cccccc",
					"border-right-color" : "#cccccc",
					"border-left-width" : "1px",
					"border-top-style" : "solid",
					"border-left-style" : "solid",
					"border-bottom-width" : "1px",
					"border-top-color" : "#cccccc",
					"border-bottom-style" : "solid",
					"text-align" : "center"
				});
				container.addChild(output_10, {
					"top": "100px",
					"left": "78px",
					"width": "130px",
					"height": "60px"
				});
				var output_11 = new cpr.controls.Output("cash");
				output_11.readOnly = true;
				output_11.value = "";
				output_11.style.css({
					"border-right-style" : "solid",
					"border-top-width" : "1px",
					"border-bottom-color" : "#cccccc",
					"border-right-width" : "1px",
					"border-left-color" : "#cccccc",
					"border-right-color" : "#cccccc",
					"border-left-width" : "1px",
					"border-top-style" : "solid",
					"border-left-style" : "solid",
					"border-bottom-width" : "1px",
					"border-top-color" : "#cccccc",
					"border-bottom-style" : "solid",
					"text-align" : "center"
				});
				container.addChild(output_11, {
					"top": "159px",
					"left": "78px",
					"width": "130px",
					"height": "60px"
				});
				var output_12 = new cpr.controls.Output("gift");
				output_12.readOnly = true;
				output_12.value = "";
				output_12.style.css({
					"border-right-style" : "solid",
					"border-top-width" : "1px",
					"border-bottom-color" : "#cccccc",
					"border-right-width" : "1px",
					"border-left-color" : "#cccccc",
					"border-right-color" : "#cccccc",
					"border-left-width" : "1px",
					"border-top-style" : "solid",
					"border-left-style" : "solid",
					"border-bottom-width" : "1px",
					"border-top-color" : "#cccccc",
					"border-bottom-style" : "solid",
					"text-align" : "center"
				});
				container.addChild(output_12, {
					"top": "218px",
					"left": "78px",
					"width": "130px",
					"height": "60px"
				});
				var output_13 = new cpr.controls.Output("card");
				output_13.readOnly = true;
				output_13.value = "";
				output_13.style.css({
					"border-right-style" : "solid",
					"border-top-width" : "1px",
					"border-bottom-color" : "#cccccc",
					"border-right-width" : "1px",
					"border-left-color" : "#cccccc",
					"border-right-color" : "#cccccc",
					"border-left-width" : "1px",
					"border-top-style" : "solid",
					"border-left-style" : "solid",
					"border-bottom-width" : "1px",
					"border-top-color" : "#cccccc",
					"border-bottom-style" : "solid",
					"text-align" : "center"
				});
				container.addChild(output_13, {
					"top": "277px",
					"left": "78px",
					"width": "130px",
					"height": "60px"
				});
				var output_14 = new cpr.controls.Output("point");
				output_14.readOnly = true;
				output_14.value = "";
				output_14.style.css({
					"border-right-style" : "solid",
					"border-top-width" : "1px",
					"border-bottom-color" : "#cccccc",
					"border-right-width" : "1px",
					"border-left-color" : "#cccccc",
					"border-right-color" : "#cccccc",
					"border-left-width" : "1px",
					"border-top-style" : "solid",
					"border-left-style" : "solid",
					"border-bottom-width" : "1px",
					"border-top-color" : "#cccccc",
					"border-bottom-style" : "solid",
					"text-align" : "center"
				});
				container.addChild(output_14, {
					"top": "336px",
					"left": "78px",
					"width": "130px",
					"height": "60px"
				});
			})(group_2);
			container.addChild(group_2, {
				"top": "139px",
				"left": "785px",
				"width": "217px",
				"height": "405px"
			});
			
			var button_2 = new cpr.controls.Button("partCancel");
			button_2.value = "선택취소";
			if(typeof onButtonClick == "function") {
				button_2.addEventListener("click", onButtonClick);
			}
			container.addChild(button_2, {
				"top": "555px",
				"left": "762px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_3 = new cpr.controls.Button("fullCancel");
			button_3.value = "전체취소";
			if(typeof onButtonClick2 == "function") {
				button_3.addEventListener("click", onButtonClick2);
			}
			container.addChild(button_3, {
				"top": "555px",
				"left": "872px",
				"width": "95px",
				"height": "20px"
			});
			
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("ea1");
			cpr.core.App.load("PosHeader", function(app) {
				if(app){
					embeddedApp_1.app = app;
				}
			});
			container.addChild(embeddedApp_1, {
				"top": "0px",
				"left": "0px",
				"width": "1024px",
				"height": "80px"
			});
			
			var radioButton_1 = new cpr.controls.RadioButton("cancelRadio");
			radioButton_1.value = "0";
			(function(radioButton_1){
				radioButton_1.setItemSet(app.lookup("cancelDs"), {
					"label": "label",
					"value": "value"
				})
			})(radioButton_1);
			if(typeof onCancelRadioSelectionChange == "function") {
				radioButton_1.addEventListener("selection-change", onCancelRadioSelectionChange);
			}
			container.addChild(radioButton_1, {
				"top": "150px",
				"left": "539px",
				"width": "200px",
				"height": "40px"
			});
			if(typeof onBodyInit == "function"){
				app.addEventListener("init", onBodyInit);
			}
		}
	});
	app.title = "PosSalesManagement";
	cpr.core.Platform.INSTANCE.register(app);
})();
