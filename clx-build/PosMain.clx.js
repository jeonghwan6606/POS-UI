/*
 * App URI: PosMain
 * Source Location: PosMain.clx
 *
 * This file was generated by eXBuilder6 compiler(1.0.4878), Don't edit manually.
 */
(function() {
	var app = new cpr.core.App("PosMain", { 
		onPrepare: function(loader) {
		},
		onCreate: function(/* cpr.core.AppInstance */ app, exports) {
			var linker = {};
			// Start - User Script
			/************************************************
			 * PointOfSales.js
			 * Created at 2024. 1. 17. 오후 3:49:30.
			 *
			 * @author sunrise
			 ************************************************/


			/*
			 * "계 산" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */



			function onButtonClick(e) {
			    var button = e.control;
			    var grd1 = app.lookup("grd1");
			    var membNo = app.lookup("MEMB_SER_NO").value;
			    var changeAmount = app.lookup("changeAmount").value;
			    
			    var currencyChange = parseCurrency(changeAmount);
			    // changedAmount가 음수인 경우에만 알림 표시
			    
			    console.log("changeAmount:", changeAmount);
			    console.log("currencyChange:", currencyChange);
			    
			    if (changeAmount.charAt(0) === '-' || changeAmount.trim() === '') {
				    	alert("받은 금액을 확인하세요.");
				    return;
				}
			    
			    var receivedAmount = app.lookup("receivedAmount");
			    var totalPrice = app.lookup("TOTAL_PRICE");
			    var changeAmountInput = app.lookup("changeAmount");
			    
			    // TOTAL_PRICE의 값을 가져옵니다.
			    var totalPriceValue = parseCurrency(totalPrice.value);
			    
			    console.log("totalPriceValue",totalPriceValue);
			    
			    var usedPoint = app.lookup("POINT").value;
			    
			    
			    
			    
			    // 선택된 행들의 인덱스 배열을 가져옵니다.
			    var selectedRowIndices = grd1.getCheckRowIndices();
			    console.log(selectedRowIndices);
			    
			    if (selectedRowIndices.length === 0) {
			        alert("선택된 상품목록이 없습니다.");
			        return;
			    }
			    
			    // 받은 돈(receivedAmount)의 값을 가져옵니다.
			   // var receivedAmountValue = parseCurrency(receivedAmount.value);
			    
			    
			    /*
			    // 계산된 거스름돈을 변경된 입력값으로 설정합니다.
			    changeAmountInput.value = formatCurrency(changeAmountValue.toFixed(0));
			    
			    // 입력값이 공백인 경우
			    if (isNaN(receivedAmountValue)) {
			        changeAmountInput.value = ''; // 거스름돈을 공백으로 설정합니다.
			    } else {
			        // 계산된 거스름돈을 변경된 입력값으로 설정합니다.
			        changeAmountInput.value = formatCurrency(changeAmountValue.toFixed(0)); // 소수점 이하 자리를 버림하여 설정합니다.
			    }
			    
			    /* 받은 돈이 입력되지 않은 경우 처리
			    if (isNaN(receivedAmountValue)) {
			        alert("받은 돈이 입력되지 않았습니다."); // 받은 돈이 입력되지 않았음을 알리는 경고 메시지
			        return false;
			    }
				
			    if (!checkValidateReceived(receivedAmountValue, totalPriceValue)) {
			        return;
			    }*/
			    
			    var confirmMessage = membNo.trim() === '' ? "비회원으로 계산하시겠습니까?" : "회원으로 계산하시겠습니까?";
			    if (confirm(confirmMessage)) {
			        // 선택된 행들의 정보를 담을 배열을 초기화합니다.
			        var selectedData = [];
			        var finalChangeAmount = parseCurrency(app.lookup("changeAmount").value);
			        console.log(finalChangeAmount);
			        
			        var finalReceivedAmount = parseCurrency(app.lookup("receivedAmount").value);
			        var finalUsedPoint = parseCurrency(app.lookup("usedPoint").value);
			        
			        if (finalReceivedAmount === '' || isNaN(finalReceivedAmount)) {
				        finalReceivedAmount = 0;
				    }
				    if (finalUsedPoint === '' || isNaN(finalUsedPoint)) {
				        finalUsedPoint = 0;
				    }
			        
			        
			        // 각 선택된 행의 인덱스를 이용하여 해당 행의 데이터를 추출하여 배열에 추가합니다.
			        for (var i = 0; i < selectedRowIndices.length; i++) {
			            var rowIndex = selectedRowIndices[i];
			            var selectedRow = grd1.getRow(rowIndex);
			            var rowData = selectedRow.getRowData();
			            var rowObject = {
			                "BAR_CODE": rowData["BAR_CODE"],
			                "QTY": rowData["QTY"],
			                "SALES_AMT": rowData["SALES_AMT"],
			                "SALE_AMT": rowData["SALE_AMT"]
			            };
			            selectedData.push(rowObject);
			        }
			        
			        // 서버로 전송할 데이터를 객체로 정의합니다.
			        var requestData = {
			            "selectedData": selectedData,
			            "membNo": membNo,
			            "changeAmount": finalChangeAmount.toString(),
			            "receivedAmount": finalReceivedAmount.toString(),
			            "usedPoint": finalUsedPoint.toString()
			        };
			        
			       
			        
			        // Submission 생성
			        var submission = new cpr.protocols.Submission();
			        
			        // 전송할 URL 설정
			        submission.action = "/POS/AddSales.do";
			        
			        // response data의 type 설정
			        submission.responseType = "javascript";
			        
			        // 서버로 전송할 데이터를 설정합니다.
			        submission.setRequestObject(requestData);
			        
			        // 서버에 데이터를 전송합니다.
			        submission.send();
			        
			        alert("계산이 완료되었습니다");
			        
			        //clearGridData(grd1);
			        
			        var rowCount = grd1.getRowCount() // 그리드의 행 수를 가져옵니다.
			        console.log(rowCount);
			        for (var i = rowCount - 1; i >= 0; i--) {
			            grd1.deleteRow(i); // 각 행을 삭제합니다.
			        }
			        
			        receivedAmount.value = "";   
			        totalPrice.value = "";
			        changeAmountInput.value = "";
			        var usedPoints = app.lookup("usedPoint");
			        usedPoints.value = "";
			        
			        membReset();
			    }
			     receivedAmount.value = "";   
			     usedPoints.value = "";
			}

			/*
			 * "선택취소" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick2(e){
				var button = e.control;
				
				var grd1 = app.lookup("grd1");
			    grd1.deleteRow(grd1.getCheckRowIndices());
			    
			    
			    var totalPrice = app.lookup("TOTAL_PRICE"); // 총 판매금액 인풋박스 객체 가져오기
			    var combo = app.lookup("qty");
			    
			    
			    // 변경된 수량에 따라 각 행의 판매금액을 다시 계산하여 총 판매금액에 반영
			    calculateTotalPrice(grd1, totalPrice);
			}

			/*
			 * "전체취소" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick3(e){
				var button = e.control;
				
				var grd1 = app.lookup("grd1");
				
				// "전체취소" 버튼을 클릭했을 때 확인 메시지를 표시합니다.
			    if (confirm("전체 취소하시겠습니까?")) {
			        grd1.checkAllRow(); // 그리드의 모든 행을 체크합니다.
			        grd1.deleteRow(grd1.getCheckRowIndices()); // 체크된 행을 삭제합니다.
			    }
			    
			  
			    var totalPrice = app.lookup("TOTAL_PRICE"); // 총 판매금액 인풋박스 객체 가져오기
			    var combo = app.lookup("qty");
			    
			    
			    // 변경된 수량에 따라 각 행의 판매금액을 다시 계산하여 총 판매금액에 반영
			    calculateTotalPrice(grd1, totalPrice);
				
			}

			function onButtonClick4(e) {
			    var phNo = app.lookup("PH_NO").value;
			    var membNo = app.lookup("MEMB_SER_NO").value;
			    var membNm = app.lookup("MEMB_NM").value

			    // 입력값 유효성 검사
			    if (!checkSearchValidation(phNo, membNo)) {
			        return;
			    }

			    // Submission 생성
			    var subMainList = new cpr.protocols.Submission();

			    // 전송할 URL 설정
			    subMainList.action = "/POS/GetMembOne.do";

			    // response data의 type 설정
			    subMainList.responseType = "javascript";

			    // 서버로 전송할 데이터를 설정합니다.
			    var requestData = {
			        "PH_NO": "",
			        "MEMB_NO": membNo,
			        "MEMB_NM": membNm
			    };
			    subMainList.setRequestObject(requestData);

				subMainList.addEventListener("submit-success", function(event) {
				    var responseData = event.control;
				    console.log(responseData.xhr.responseText);    
				    var jsonObj = JSON.parse(responseData.xhr.responseText);    
				    console.log(jsonObj);    
				
				    // memb 데이터셋 가져오기
				    var membList = jsonObj["memb"];
					var openWindow = null;
				    // memb 데이터셋이 두 개 이상인 경우에는 팝업 창 열기
				    if (membList.length >= 1) {
				        // 팝업 창 열기
				        var filePath = "/POS/searchMembPop.do";
						openWindow = window.open(filePath,"_popup","width=400,height=600");
				        
				        var phNo = app.lookup("PH_NO").value;
				        
				        // 팝업 창이 정상적으로 열렸는지 확인
				        // 팝업 창이 정상적으로 열렸는지 확인
				        if (openWindow) {
				            // 팝업 창으로 전송할 데이터 설정
				            var phNo = app.lookup("PH_NO").value;
				            localStorage.setItem("PH_NO", phNo);
				            
				            
				            openWindow.postMessage({
				                membList: membList,
				                PH_NO: phNo
				            }, "*");
				        } else {
				            // 팝업 창이 열리지 않은 경우, 에러 처리
				            console.error("팝업 창을 열 수 없습니다.");
				        }
				        
				        
				         window.addEventListener("message", function(event) {
						    // 메시지 이벤트가 발생했을 때 실행되는 함수
						    var receivedData = event.data;
						    // 이후 데이터를 처리하는 코드를 작성하세요
						    console.log("받은 데이터:", receivedData);
						
						    var matchedRow = null;
						    var receivedMembSerNo = parseInt(receivedData.MEMB_SER_NO);
								
							console.log(" receivedMembSerNo:", receivedMembSerNo);
								
							for (var i = 0; i < membList.length; i++) {
							    var membSerNo = parseInt(membList[i].MEMB_SER_NO);
							
							
							    if (membSerNo === receivedMembSerNo) {
							        matchedRow = membList[i];
							        break;
							    }
							}
						
						    // 찾은 행이 있으면 해당 데이터를 화면에 표시
						    if (matchedRow) {
						    	
						    	app.lookup("PERS_COP_TY").value = matchedRow["PERS_COP_TY"] || "";
						        app.lookup("ID_NO").value = matchedRow["ID_NO"] || "";
						        app.lookup("ADDR").value = (matchedRow["ADDR_1"] || "") + " " + (matchedRow["ADDR_2"] || "");
						        app.lookup("MEMB_NM").value = matchedRow["MEMB_NM"] || "";
						        app.lookup("BUSI_NO").value = matchedRow["BUSI_NO"] || "";
						        app.lookup("MEMB_SER_NO").value = matchedRow["MEMB_SER_NO"] || "";
						        app.lookup("PH_NO").value = matchedRow["MOB_PH_NO"] || "";
						        app.lookup("POINT").value = matchedRow["POINT"] || "";
						    	
						    }
						       var PERS_COP_TY = app.lookup("PERS_COP_TY").value;
							   console.log(PERS_COP_TY);		    
						});
				    } else {
				        // memb 데이터셋이 없는 경우, 에러 처리 또는 기타 로직 수행
				        console.error("회원 정보가 없습니다.");
				        alert("회원 정보가 없습니다.");
				    }
				});

			    // 조회 Submission send
			    subMainList.send();
			}

			// 검색 유효성 검사 함수
			function checkSearchValidation(phNo, membNo) {
			    if (phNo.trim() === '') {
			        alert('전화번호를 입력하세요.');
			        return false;
			    }

			    // 전화번호가 입력되었는지 확인
			    if (phNo.trim() !== '') {
			    	// 전화번호 길이 확인
				    if (phNo.trim().length < 4) {
				        alert('전화번호는 4자리 이상으로 입력해주세요.');
				        return false;
				    }
				}

			    return true;
			}

			function onButtonClick5(e){
			    var button = e.control;
			    var phNo = app.lookup("PH_NO").value;
			    var membNm = app.lookup("MEMB_NM").value;
			    var idNo = app.lookup("ID_NO").value;
				var busiNo = app.lookup("BUSI_NO").value;

				 // idNo가 null이면 빈 문자열로 변환
			    idNo = idNo !== null ? idNo : "";
			    // busiNo가 null이면 빈 문자열로 변환
			    busiNo = busiNo !== null ? busiNo : "";

			    // 입력 값이 유효한지 확인
			    if (!checkValidation(phNo, membNm, idNo, busiNo)) {
			        return;
			    }

			    // Submission 생성
			    var subMainList = new cpr.protocols.Submission();

			    // 전송할 URL 설정
			    subMainList.action = "/POS/AddMember.do";

			    // response data의 type 설정
			    subMainList.responseType = "javascript";

			    // 서버로 전송할 데이터를 설정합니다.
			    var requestData = {
			        "PH_NO": phNo,
			        "ID_NO": idNo,
			        "BUSI_NO": busiNo,
			        "MEMB_NM": membNm
			    };
			    
			    subMainList.setRequestObject(requestData);

			    // 서브미션 전송
			    subMainList.send();
			   
				// 서브미션 성공 이벤트 핸들러 등록
			    subMainList.addEventListener("submit-success", function(event) {
			     
				    var sms1 = event.control;
				    
				    console.log(sms1.xhr.responseText);    
				    var jsonObj = JSON.parse(sms1.xhr.responseText);    
				    console.log(jsonObj);    
			       
			        var message = jsonObj.message;
			    	alert(message);
			        
			    });   
			}

			// 회원 등록 유효성 검사 함수
			function checkValidation(phNo, membNm, idNo, busiNo) {
			    // 필수 입력 값 확인
			    if ((idNo.trim() === '' && busiNo.trim() === '') || membNm.trim() === '' || phNo.trim() === '') {
				    alert('전화번호, 회원명, 주민등록번호 또는 사업자번호는 필수 입력값입니다.');
				    return false;
				}

			    // 전화번호 길이 확인
			    if (phNo.trim().length !== 11) {
			        alert('전화번호는 11자리로 입력해주세요.');
			        return false;
			    }
			    
			    // 전화번호 길이 확인
			     if (idNo.trim() !== '') {
				    if (idNo.trim().length !== 13) {
				        alert('주민번호는 13자리로 입력해주세요.');
				        return false;
				    }
				 }
				 
				 // 전화번호 길이 확인
			     if (busiNo.trim() !== '') {
				    if (busiNo.trim().length !== 10) {
				        alert('사업자번호는 10자리로 입력해주세요.');
				        return false;
				    }
				 }
			    return true;
			    
			}

			/*
			 * "입력" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick6(e){
				var button = e.control;
				var grd1 = app.lookup("grd1");
				
				// 그리드에 존재하는 행의 개수 확인
			    var rowCount = grd1.rowCount;
				if (rowCount > 0) {
				    // 그리드에 존재하는 가장 마지막 행의 바코드 번호를 확인
				    var lastRowData = grd1.getRow(rowCount - 1).getRowData();
				    if (!lastRowData["BAR_CODE"]) {
				        alert("추가된 행에 바코드 번호가 입력되어 있지 않습니다.");
				        return;
				    }
				}
				
				grd1.insertRow(grd1.rowCount, true);
				
				var qtySet = app.lookup("qtySET");
			 	
			 	qtySet.clear();

				 // 1부터 100까지의 값을 데이터셋에 추가합니다.
			    for (var i = 1; i <= 100; i++) {
			        // 각 값을 데이터셋에 추가합니다.
			        qtySet.addRowData({
			            "label": (i + ''), // 레이블은 값을 문자열로 설정합니다.
			            "value": (i + '') // 값도 문자열로 설정합니다.
			        });
			    }
			    

			    
			    // 삽입된 행의 체크박스를 비활성화합니다.
			    var newRowIndex = (grd1.rowCount - 1); // 삽입된 행의 인덱스
			    grd1.setEnabledTypedCell("checkbox",newRowIndex, false);
			}
			/*
			 * 라디오 버튼에서 selection-change 이벤트 발생 시 호출.
			 * 라디오버튼 아이템을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onRdb1SelectionChange(e){
				var rdb1 = e.control;
				var rdb1 = app.lookup("rdb1");
				
				
				var select = rdb1.getSelectionFirst().label;
			    if (rdb1.value === 'card') {
			        // 카드 선택 시
			        rdb1.setItemEnable(1, false);
			        alert('카드는 일시적으로 사용이 불가합니다.');
			        // 카드 선택을 취소합니다.
			        rdb1.selectItem(0);
			    }
				
			}

			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */


			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 *
			/*
			 * 서브미션에서 submit-success 이벤트 발생 시 호출.
			 * 통신이 성공하면 발생합니다.
			 */
			function onSms1SubmitSuccess(e){
				var sms1 = e.control;
				var Grid = app.lookup("grd1");
				Grid.redraw();
			}


			/*
			 * 인풋 박스에서 before-value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장되기 전에 발생하는 이벤트. 다음 이벤트로 value-change가 발생합니다.
			 */
			function onMEMB_NMBeforeValueChange(e) {
			    
			}

			/*
			 * 서치 인풋에서 search 이벤트 발생 시 호출.
			 * Searchinput의 enter키 또는 검색버튼을 클릭하여 인풋의 값이 Search될때 발생하는 이벤트
			 */
			function onSearchInputSearch(e) {
			   
			}

			// 바코드에 해당하는 행의 인덱스를 찾는 함수
			function findRowIndexByBarcode(dataset, barcode) {
			    var ds1 = app.lookup("ds1");
			    var rowCount = ds1.getRowCount();
			    for (var i = 0; i < rowCount; i++) {
			        var rowData = dataset.getRowData(i);
			        console.log("Row " + i + " - BAR_CODE: " + rowData["BAR_CODE"]);
			        if (rowData["BAR_CODE"] === barcode) {
			            console.log("Barcode found at index " + i);
			            return i; // 바코드에 해당하는 행의 인덱스를 반환합니다.
			        }
			    }
			    console.log("Barcode not found");
			    return -1; // 바코드에 해당하는 행을 찾지 못한 경우 -1을 반환합니다.
			}

			// 바코드가 중복될 경우 처리하는 함수
			function handleDuplicateBarcode(dataset, barcode) {
			    var rowCount = dataset.getRowCount();
			    var duplicateCount = 0;
			    var firstDuplicateIndex = -1;
			    var lastDuplicateIndex = -1;
			    for (var i = 0; i < rowCount; i++) {
			        var rowData = dataset.getRowData(i);
			        if (rowData["BAR_CODE"] === barcode) {
			            if (duplicateCount === 0) {
			                firstDuplicateIndex = i; // 첫 번째 중복 항목의 인덱스를 설정
			            }
			            duplicateCount++;
			            lastDuplicateIndex = i;
			        }
			    }

			    if (duplicateCount > 1) {
			        console.log("Duplicate barcode found " + duplicateCount + " times.");
			        console.log("Removing last occurrence and increasing quantity of first occurrence.");
			        // 첫 번째 중복 항목의 수량 증가
			        var qtyColumnName = "QTY"; // 수량이 저장된 열 이름에 맞게 수정해야 함
			        var qtyValue = parseInt(dataset.getValue(firstDuplicateIndex, qtyColumnName)); // qtyValue를 정수로 변환
			        dataset.setValue(firstDuplicateIndex, qtyColumnName, qtyValue + 1); // 첫 번째 중복 항목의 수량 증가
			        dataset.deleteRow(lastDuplicateIndex);// 마지막 중복 항목 제거
			        
			        var grd1 = app.lookup("grd1"); // 그리드 객체 가져오기
				    var totalPrice = app.lookup("TOTAL_PRICE"); // 총 판매금액 인풋박스 객체 가져오기
				    var combo = app.lookup("qty");
				    
				    
				    // 변경된 수량에 따라 각 행의 판매금액을 다시 계산하여 총 판매금액에 반영
				    calculateTotalPrice(grd1, totalPrice);
			    }
			    
			    var grd1 = app.lookup("grd1"); // 그리드 객체 가져오기
			    var totalPrice = app.lookup("TOTAL_PRICE"); // 총 판매금액 인풋박스 객체 가져오기
			    var combo = app.lookup("qty");
			    
			    
			    // 변경된 수량에 따라 각 행의 판매금액을 다시 계산하여 총 판매금액에 반영
			    calculateTotalPrice(grd1, totalPrice);
			  
			}


			/*
			function onSms1Receive(e) {
			    var sms1 = e.control;
			    var xhr = sms1.xhr;
			    
			    // 서버로부터 받은 JSON 데이터 파싱
			    var jsonData = JSON.parse(xhr.responseText);
			    
			    // 콘솔에 받은 데이터 출력 (디버깅용)
			    console.log("Received JSON Data:", jsonData);
			    
			    // 그리드에 데이터를 채우기 위해 그리드 모델 가져오기
			    var gridModel = app.lookup("grd1").getBindDataset();

			    // 그리드 모델에 데이터 설정
			    gridModel.setRecords(jsonData);
			}
			*/

			/*
			 * 그리드에서 row-check 이벤트 발생 시 호출.
			 * Grid의 행 선택 컬럼(columnType=checkbox)이 체크 되거나 해제되었을 때 발생하는 이벤트.
			 */
			function onGrd1RowCheck(e) {
			    var grd1 = e.control;
			   	calculateTotalPrice();
			}

			// 총 가격을 계산하는 함수
			function calculateTotalPrice() {
			    var grd1 = app.lookup("grd1");
			    var totalPriceInput = app.lookup("TOTAL_PRICE");
			    
			    // 체크된 행의 SALES_AMT를 모두 더하여 총 가격을 계산합니다.
			    var checkedRows = grd1.getCheckRowIndices();
			    var totalSalesAmt = 0;
			    for (var i = 0; i < checkedRows.length; i++) {
			        var salesAmt = parseCurrency(grd1.getCellValue(checkedRows[i], "SALES_AMT")) || 0; // 문자열을 숫자로 변환하여 더합니다.
			        totalSalesAmt += salesAmt;
			    }
			    
			    // 계산된 총 가격을 통화 형식으로 변환하여 TOTAL_PRICE 영역에 표시합니다.
			    totalPriceInput.value = formatCurrency(totalSalesAmt.toFixed(0));
			    
			    // 콘솔에 총 가격을 로그로 출력합니다.
			    console.log("Total Sales Amount:", totalSalesAmt);
			}


			/*
			 * 그리드에서 row-uncheck 이벤트 발생 시 호출.
			 * Grid의 행 선택 컬럼(columnType=checkbox)이 체크 해제되었을 때 발생하는 이벤트.
			 */
			function onGrd1RowUncheck(e){
				var grd1 = e.control;
			   	calculateTotalPrice();
				
			}


			function checkValidateReceived(receivedAmountValue, totalPriceValue) {
			    
			    var receivedValue = app.lookup("receivedAmount");
			    var changeAmount = app.lookup("changeAmount").value;
			    console.log("currencyChange:",changeAmount);
			    
			    var currencyChange = parseCurrency(changeAmount);
			    
			    console.log("currencyChange",currencyChange);
			    var usedPoint = app.lookup("usedPoint");
			    

			    
			    // 거스름돈이 음수인 경우 처리
			    if (currencyChange < 0) {
			        alert("받은 돈이 부족합니다."); // 받은 돈이 총 가격보다 적음을 알리는 경고 메시지
			        receivedValue.value = "";
			        usedPoint.value ="";
			        return false;
			    }

			    return true;
			}


			// 받은 돈을 입력값으로 받아서 거스름돈을 계산하고 출력하는 함수
			function calculateChange(receivedAmount, totalPriceInput, changeAmountInput) {
			    var receivedAmountValue = receivedAmount.value.trim(); // 입력값을 문자열로 받음
			    var totalPrice = parseCurrency(totalPriceInput.value);
			    var usedPointValue = app.lookup("usedPoint").value.trim(); // usedPoint의 값

			    // receivedAmountValue가 공백인 경우 또는 숫자가 아닌 경우 0으로 설정합니다.
			    if(parseCurrency(receivedAmountValue) === '' || isNaN(parseCurrency(receivedAmountValue))) {
			        
			        receivedAmountValue = '0';
			    }

			    // totalPrice가 공백인 경우 또는 totalPrice가 숫자가 아닌 경우, 함수를 종료합니다.
			    if (isNaN(totalPrice) || totalPrice === '') {
			        return;
			    }

			    // usedPointValue가 숫자가 아닌 경우 또는 공백인 경우, '0'으로 설정합니다.
			    if (parseCurrency(usedPointValue) === '' || isNaN(parseCurrency(usedPointValue))) {
			        usedPointValue = '0';
			    }

			    // usedPoint를 totalPrice에서 차감합니다.
			    totalPrice -= parseCurrency(usedPointValue);

			    // 거스름돈을 계산합니다.
			    var changeAmountValue = parseCurrency(receivedAmountValue) - totalPrice;

			    var changeAmount = app.lookup("changeAmount");
			    changeAmount.value = formatCurrency(changeAmountValue.toFixed(0)); // 소수점 이하 자리를 버림하여 설정합니다.
			}

			function onReceivedAmountValueChange(e) {
			    var receivedAmount = e.control;
			    var totalPriceInput = app.lookup("TOTAL_PRICE");
			    var changeAmountInput = app.lookup("changeAmount");
			    
			    var receivedAmountValue = parseCurrency(app.lookup("receivedAmount").value);


				
			    
				 // 입력값이 공백인 경우
			    if (receivedAmountValue === '' || isNaN(receivedAmountValue)) {
			        receivedAmount.value = ''; // 거스름돈을 공백으로 설정합니다.
			    }else{
			         
				    // 받은 돈이 숫자가 아니거나 음수인 경우 처리
				    if (receivedAmountValue < 0) {
				        alert("받은 금액은 양수이어야 합니다."); // 받은 금액이 양수여야 함을 알리는 경고 메시지
				        receivedAmount.value = "";
				        return;
				    }
			    
			    
				    // 변환된 값을 다시 포맷하여 문자열로 변경
				    var receivedAmountFormatted = formatCurrency(receivedAmountValue);
				    
				    // 받은 돈 입력값을 다시 설정
				    app.lookup("receivedAmount").value = receivedAmountFormatted;
			    }
			    // 거스름돈 계산
			    calculateChange(receivedAmount, totalPriceInput, changeAmountInput);
			    
			}


			function formatCurrency(number) {
			    return Number(number).toLocaleString();
			}

			// 문자열을 숫자로 변환하는 함수
			function parseCurrency(string) {
				// 문자열의 첫 번째 문자가 '-'로 시작하는 경우 음수로 처리합니다.
			    if (string.charAt(0) === '-') {
			    	var number = parseFloat(string.replace(/,/g, ''));	
			        number *= -1;
			    }else{
			    	var number = parseFloat(string.replace(/,/g, ''));	
			    }
				 
			    return number;
			}

			function membReset(){
				app.lookup("ID_NO").value = ""; // null이면 공백 문자열로 대체
			    app.lookup("ADDR").value = "";
			    app.lookup("MEMB_NM").value = "";
			    app.lookup("BUSI_NO").value = "";
			    app.lookup("MEMB_SER_NO").value = "";
			    app.lookup("PH_NO").value = "";
			    app.lookup("POINT").value = "";
			    app.lookup("PERS_COP_TY").value = "";
			}

			/*
			 * 콤보 박스에서 selection-change 이벤트 발생 시 호출.
			 * ComboBox Item을 선택하여 선택된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onQtySelectionChange2(e){
				var qty = e.control;
				  var qty = e.control;
			    var grd1 = app.lookup("grd1"); // 그리드 객체 가져오기
			    var totalPrice = app.lookup("TOTAL_PRICE"); // 총 판매금액 인풋박스 객체 가져오기
			    var combo = app.lookup("qty");
			    
			    
			    // 변경된 수량에 따라 각 행의 판매금액을 다시 계산하여 총 판매금액에 반영
			    calculateTotalPrice(grd1, totalPrice);
			}

			/*
			 * "초기화" 버튼에서 click 이벤트 발생 시 호출.
			 * 사용자가 컨트롤을 클릭할 때 발생하는 이벤트.
			 */
			function onButtonClick7(e){
				var button = e.control;
				membReset();
			}

			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onMEMB_NMValueChange(e){
				var mEMB_NM = e.control;
			    var IpbValue = e.newValue;
				var membNm = app.lookup("MEMB_NM");
				
			    
			    // 자음 또는 모음이 포함되지 않고, 공백이 아닌 경우에만 값 변경
			    if (!/^[가-힣\s]+$/.test(IpbValue) && IpbValue.trim() !== "") {
				    alert("옳바른 한글명이 아닙니다(특수문자,영어,숫자 포함)");
				    membNm.value = "";
				    membNm.focus();
				    
				}
			}


			/*
			 * 인풋 박스에서 input 이벤트 발생 시 호출.
			 * 입력상자에 보여주는 텍스트가 키보드로부터 입력되어 변경되었을때 발생하는 이벤트.
			 */
			function onPH_NOInput(e){
				var pH_NO = e.control;
				var name = app.lookup("MEMB_NM");
				var membNo= app.lookup("MEMB_SER_NO");
				var idNo = app.lookup("ID_NO");
				var ADDR = app.lookup("ADDR");
				var busiNo = app.lookup("BUSI_NO");
				var phNo = app.lookup("PH_NO");
				var membPoint = app.lookup("POINT");
				
				membNo.value ="";
				var persCopTy = app.lookup("PERS_COP_TY");
				persCopTy.value = "1";
				ADDR.value ="";
				busiNo.value ="";
				membPoint.value ="";
			}

			/*
			 * 인풋 박스에서 input 이벤트 발생 시 호출.
			 * 입력상자에 보여주는 텍스트가 키보드로부터 입력되어 변경되었을때 발생하는 이벤트.
			 */
			function onMEMB_NMInput2(e){
				var mEMB_NM = e.control;
				
				var membNo= app.lookup("MEMB_SER_NO");
				
				membNo.value ="";
				var persCopTy = app.lookup("PERS_COP_TY");
				persCopTy = "1";

			    var ADDR = app.lookup("ADDR");
			    var busiNo = app.lookup("BUSI_NO");
			    var membPoint = app.lookup("POINT");
				ADDR.value ="";
				busiNo.value ="";
				membPoint.value ="";
			}

			/*
			 * 인풋 박스에서 input 이벤트 발생 시 호출.
			 * 입력상자에 보여주는 텍스트가 키보드로부터 입력되어 변경되었을때 발생하는 이벤트.
			 */
			function onID_NOInput(e){
				var iD_NO = e.control;
				var membNo= app.lookup("MEMB_SER_NO");
				var persCopTy = app.lookup("PERS_COP_TY");
				
				membNo.value ="";
				persCopTy.value = "1";
				
				var ADDR = app.lookup("ADDR");
			    var busiNo = app.lookup("BUSI_NO");
			    var membPoint = app.lookup("POINT");
				ADDR.value ="";
				busiNo.value ="";
				membPoint.value ="";
			}

			/*
			 * 인풋 박스에서 input 이벤트 발생 시 호출.
			 * 입력상자에 보여주는 텍스트가 키보드로부터 입력되어 변경되었을때 발생하는 이벤트.
			 */
			function onBUSI_NOInput(e){
				var bUSI_NO = e.control;
				var membNo= app.lookup("MEMB_SER_NO");
				
				membNo.value ="";
			}

			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onTOTAL_PRICEValueChange(e){
				var tOTAL_PRICE = e.control;
			    var changeAmountInput = app.lookup("changeAmount");
			    var receivedAmountInput = app.lookup("receivedAmount");
			    var usedPoint = app.lookup("usedPoint");
			    receivedAmountInput.value = "";
				changeAmountInput.value = "";
				usedPoint.value = "";
				
			}

			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onID_NOValueChange2(e){
				var iD_NO = e.control;
			    var ssn = iD_NO.value;
				var persCopTy = app.lookup("PERS_COP_TY").value;
				
				console.log("onId_NOValueChange2 persCopTy:",persCopTy);
				// 공백인 경우에는 유효성 검사를 실행하지 않음
				if (ssn === '') {
				    return;
				}
				
				if(persCopTy === '2'){
					return;
				}
					
			    if (!isValidSSN(ssn)) {
			        iD_NO.value = ""; // 입력된 값 초기화
			        iD_NO.focus(); // 포커스 이동
			    }
				
			}

			function isValidSSN(ssn) {
			    ssn = ssn.replace(/-/g, '');

			    if (!/^[0-9]+$/.test(ssn)) {
			        alert("주민등록번호는 숫자만 입력 가능합니다.");
			        return false;
			    }

			    if (ssn.length !== 13) {
			        alert("주민등록번호는 13자리여야 합니다.");
			        return false;
			    }

			    var front = ssn.substring(0, 6);
			    var back = ssn.substring(6, 13);

			    var year = parseInt(front.substring(0, 2), 10);
			    var month = parseInt(front.substring(2, 4), 10);
			    var day = parseInt(front.substring(4, 6), 10);

			    var generationDigit = parseInt(ssn.charAt(6), 10);

			    if (generationDigit === 1 || generationDigit === 2) {
			        year += 1900;
			    } else if (generationDigit === 3 || generationDigit === 4) {
			        year += 2000;
			    }

			    var birthDate = new Date(year, month - 1, day);

			    if (isNaN(birthDate.getTime())) {
			        alert("유효하지 않은 주민등록번호입니다.");
			        return false;
			    }

			    if (!/^\d+$/.test(back)) {
			        return false;
			    }

			    var checkDigit = calculateCheckDigit(front, back);

			    if (checkDigit !== parseInt(ssn.charAt(12), 10)) {
			        alert("유효하지 않은 주민등록번호입니다.");
			        return false;
			    }

			    var currentYear = new Date().getFullYear();
			    var age = currentYear - year;

			    if (age < 19) {
			        alert("미성년자의 주민등록번호는 입력할 수 없습니다.");
			        return false;
			    }

			    return true;
			}

			function calculateCheckDigit(front, back) {
			    var weight = [2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5];

			    var digits = (front + back).substring(0, 12);

			    var sum = 0;
			    for (var i = 0; i < 12; i++) {
			        sum += parseInt(digits.charAt(i), 10) * weight[i];
			    }

			    var remainder = sum % 11;

			    return 11 - remainder;
			}

			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onMEMB_SER_NOValueChange(e){
				
			    var mEMB_SER_NO = e.control;
			    var point = app.lookup("usedPoint");
			    var membPoint = app.lookup("POINT");
				point.value = '';
			    if (mEMB_SER_NO.value.trim() === '') {         
			        point.readOnly = true; // usedPoint를 읽기 전용으로 설정
			    } else {
			    	if (membPoint.value.trim() !== '') {
			        	point.readOnly = false; // usedPoint를 읽기 전용 해제
			        }
			    }
			}

			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onIpb7ValueChange(e){
				var ipb7 = e.control;
				var point = app.lookup("usedPoint");
				point.value = '';
			    if (ipb7.value.trim() === '') {         
			        point.readOnly = true; // usedPoint를 읽기 전용으로 설정
			    } else {
			        point.readOnly = false; // usedPoint를 읽기 전용 해제
			    }
			}

			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onUsedPointValueChange(e){
				var usedPoint = e.control;
				
				
				var totalPriceInput = app.lookup("TOTAL_PRICE");
			    var changeAmountInput = app.lookup("changeAmount");
			    var receivedAmount = app.lookup("receivedAmount");
				var usedPointValue = parseCurrency(app.lookup("usedPoint").value);

				var unusedPointValue = parseCurrency(app.lookup("POINT").value);
				
				var totalPriceCurrency = parseCurrency(totalPriceInput.value);

				 // 입력값이 공백인 경우
			    if (usedPointValue === '' || isNaN(usedPointValue)) {
			        usedPoint.value = ''; // 거스름돈을 공백으로 설정합니다.
			        
			        return;
			    } else {
			       	// 받은 돈이 숫자가 아니거나 음수인 경우 처리
				    if (usedPointValue < 0) {
				        alert("사용할 포인트는 양수이어야 합니다."); // 받은 금액이 양수여야 함을 알리는 경고 메시지
				        usedPoint.value = "";
				        return;
				    }
			    
			    	
			    
			    	if(usedPointValue > unusedPointValue){
			    		alert("사용가능한 포인트를 초과하였습니다.")
			    		usedPoint.value = '';
			    		return;
			    	}
			    	 	
			    	if(usedPointValue > totalPriceCurrency){
			 		
			    		usedPoint.value = formatCurrency(totalPriceCurrency);
			    		return;
			    	}
			    	
				    if (!confirm("포인트를 사용하시겠습니까?")) {
				        usedPoint.value = ''; // 포인트를 사용하지 않을 경우 공백으로 설정
				        return;
				    }	        
					    
				    // 변환된 값을 다시 포맷하여 문자열로 변경
				    var usedPointValueFormatted = formatCurrency(usedPointValue);
				   
				   	// 받은 돈 입력값을 다시 설정
				    app.lookup("usedPoint").value = usedPointValueFormatted;
				   
				 }   
				 
				
				  // 거스름돈 계산
				 calculateChange(receivedAmount, totalPriceInput, changeAmountInput);
			    
			}

			/*
			 * 인풋 박스에서 input 이벤트 발생 시 호출.
			 * 입력상자에 보여주는 텍스트가 키보드로부터 입력되어 변경되었을때 발생하는 이벤트.
			 */
			function onUsedPointInput(e){
				var usedPoint = e.control;
				alert("아직 준비중인 기능입니다.");
				usedPoint.value = "";
				return;
				
				
				 var totalPriceInput = app.lookup("TOTAL_PRICE");
			    var changeAmountInput = app.lookup("changeAmount");
			    var receivedAmount = app.lookup("receivedAmount");
				var usedPointValue = parseCurrency(app.lookup("usedPoint").value);

				if (parseCurrency(totalPriceInput.value) === '' || isNaN(parseCurrency(totalPriceInput.value))) {
			        alert("계산할 상품이 없습니다.");
			        usedPoint.value = "";
			        return;// 거스름돈을 공백으로 설정합니다.
			    }
			    
			    var point = app.lookup("POINT").value;
			    if (parseCurrency(point) === '' || isNaN(parseCurrency(point))) {
			        alert("사용 가능한 포인트가 없습니다.");
			        usedPoint.value = "";
			        return;// 거스름돈을 공백으로 설정합니다.
			    }
			}

			/*
			 * 인풋 박스에서 input 이벤트 발생 시 호출.
			 * 입력상자에 보여주는 텍스트가 키보드로부터 입력되어 변경되었을때 발생하는 이벤트.
			 */
			function onReceivedAmountInput(e){
				var receivedAmount = e.control;
				var receivedAmount = e.control;
			    var totalPriceInput = app.lookup("TOTAL_PRICE");
			    var changeAmountInput = app.lookup("changeAmount");
			    
			    var receivedAmountValue = parseCurrency(app.lookup("receivedAmount").value);


				if (parseCurrency(totalPriceInput.value) === '' || isNaN(parseCurrency(totalPriceInput.value))) {
			        alert("계산할 상품이 없습니다.");
			        receivedAmount.value = "";
			        return;// 거스름돈을 공백으로 설정합니다.
			    }
			}

			/*
			 * 인풋 박스에서 before-value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장되기 전에 발생하는 이벤트. 다음 이벤트로 value-change가 발생합니다.
			 */
			function onUsedPointBeforeValueChange(e){
				var usedPoint = e.control;
				
			}

			/*
			 * 서치 인풋에서 value-change 이벤트 발생 시 호출.
			 * SearchInput의 value를 변경하여 변경된 값이 저장된 후에 발생하는 이벤트.
			 */
			function onSearchInputValueChange2(e){
				var searchInput = e.control;
			    
			    // 검색 인풋의 값을 가져옵니다.
			    var inputValue = searchInput.value;

			    getProductOne(inputValue);
				  
			    /*
			    // 서브미션의 응답 데이터를 처리하는 이벤트 핸들러 등록
			    subMainList.addEventListener("submit-success", function(e) {
			        var sms1 = e.control;
			    
				    var resCount = sms1.getResponseDataCount();
				    for(var i = 0; i < resCount; i++){
				        if(sms1.getResponseData(i).data.type == ""){
				            console.log(sms1.getResponseData(i).data.getRowDataRanged());
				        }else{
				            console.log(sms1.getResponseData(i).data.getDatas());
				        }
				    }
				        
			        // 받은 응답 데이터를 처리하거나 필요한 작업을 수행할 수 있습니다.
			        // 예를 들어, 받은 데이터를 그리드에 표시할 수 있습니다.
			        // grd1.getBindDataset().setRecords(responseData);
			    });
			    */
			    
			    var totalPriceInput = app.lookup("TOTAL_PRICE");
			    var changeAmountInput = app.lookup("changeAmount");
			    var receivedAmountInput = app.lookup("receivedAmount");
			    var usedPoint = app.lookup("usedPoint");
			    receivedAmountInput.value = "";
				changeAmountInput.value = "";
				usedPoint.value = "";

			}

			function getProductOne(inputValue){
				    // 서브미션 생성
			    var subMainList = new cpr.protocols.Submission();
			    
			    // 전송할 URL 설정
			    subMainList.action = "/POS/GetProdOne.do";
			    
			    // response data의 type 설정
			    subMainList.responseType = "javascript"; // 예시로 JSON 형식으로 설정
			    
			    // 서버로 전송할 데이터를 설정합니다.
			    subMainList.setParameters("searchValue", inputValue);
			    
			    // 서브미션 전송
			    subMainList.send();
			    
			    // 서브미션의 응답 데이터를 처리하는 이벤트 핸들러 등록
				subMainList.addEventListener("receive", function(e) {
				    var subMainList = e.control;
				    console.log(subMainList.xhr.responseText);    
				    var jsonObj = JSON.parse(subMainList.xhr.responseText);    
				    console.log(jsonObj);    
				    
				    var grd1 = app.lookup("grd1"); 
				    
				    var ds1 = app.lookup("ds1");
				
				    // 데이터셋에 추가하기 전에 기존 데이터를 모두 삭제할지 여부에 따라 결정
				    // ds1.clear(); // 기존 데이터 모두 삭제
				    
				    // 바코드를 기준으로 해당 행을 찾습니다.
				    var rowIndex = findRowIndexByBarcode(ds1, inputValue);
				    
				    // 바코드에 해당하는 행이 있을 경우에만 데이터를 업데이트합니다.
				    if (jsonObj["ds1"] !== null && rowIndex !== -1) {
				        console.log("Row index found: " + rowIndex);
				        
				        // SELL_PR 값 업데이트
				        console.log("Updating SALES_PR with value: " + jsonObj["ds1"]["SELL_PR"]);
				        var sellPR = jsonObj["ds1"]["SELL_PR"];
				        var prodNm = jsonObj["ds1"]["PROD_NM"];
				        
				        ds1.setValue(rowIndex, "PROD_NM",prodNm);
				        ds1.setValue(rowIndex, "SALES_PR", sellPR);
				        
				        // SALE_PR 값 업데이트
				        if (jsonObj["ds1"]["SALE_PR"] === null) {
				            console.log("SALE_PR is null, setting SALE_AMT to 0");
				            ds1.setValue(rowIndex, "SALE_PR", 0);
				        } else {
				            console.log("Updating SALE_AMT with value: " + jsonObj["ds1"]["SALE_PR"]);
				            ds1.setValue(rowIndex, "SALE_PR", jsonObj["ds1"]["SALE_PR"]);
				        }
				         // 최초 수량을 1로 설정
				        var qtyCmb = app.lookup("qty");
				        qtyCmb.putValue("1");
				        
				        grd1.setEnabledTypedCell("checkbox",rowIndex, true);
				        // 해당 행 체크
				        grd1.setCheckRowIndex(rowIndex, true);
				        calculateTotalPrice();
				    } else {
				        console.log("Row index not found for barcode: " + inputValue);
				        // 바코드에 해당하는 행이 없으면 입력된 행 삭제
				        alert("바코드에 해당하는 상품이 없습니다.");
				        grd1.deleteRow(rowIndex);
				    }
				    
				    // 바코드가 중복될 경우 처리
				    handleDuplicateBarcode(ds1, inputValue);
				});
				
				
			 	var qty = app.lookup("qty");
				// 바코드가 중복될 경우 처리
			}

			function onBodyLoad2(e) {
			    var paramValue = cpr.core.Platform.INSTANCE.getParameter("cancelledItems");
			    console.log(paramValue);
			    
			    if (paramValue) {
			        var ds1 = app.lookup("ds1");
			        var grd1 = app.lookup("grd1");
			             
			        // 취소된 품목들을 순회하면서 데이터셋에 추가
			        for (var i = 0; i < paramValue.length; i++) {
			            var item = paramValue[i];
			            var barcode = item["barcode"];
			            var qty = item["qty"];
			            var rowIndex = i ;
			              
			            // 바코드만 가져와서 검색실행하게 하고 싶지만 잘안됨...ㄴ
			            // ds1.addRowData({"BAR_CODE": barcode, "QTY": qty});
			        	grd1.insertRowData(rowIndex, false,{"BAR_CODE": barcode, "QTY": qty});
						var qtySet = app.lookup("qtySET");
			 	
					 	qtySet.clear();
					
						 // 1부터 100까지의 값을 데이터셋에 추가합니다.
					    for (var a = 1; a <= 100; a++) {
					        // 각 값을 데이터셋에 추가합니다.
					        qtySet.addRowData({
					            "label": (a + ''), // 레이블은 값을 문자열로 설정합니다.
					            "value": (a + '') // 값도 문자열로 설정합니다.
					        });
					    }
					    console.log(i+"번째 바코드:",barcode);
			        	getProductOne(barcode);
			        }       
			    }
			}

			/*
			 * 인풋 박스에서 value-change 이벤트 발생 시 호출.
			 * 변경된 value가 저장된 후에 발생하는 이벤트.
			 */
			function onPERS_COP_TYValueChange(e){
				var pERS_COP_TY = e.control;
				
				console.log("pERS_COP_TY:",pERS_COP_TY.value);
				
				var idLabel = app.lookup("idSnp");
				
				if(pERS_COP_TY.value==='2'){
					
					idLabel.value = "법인번호";
				}else{
					idLabel.value = "주민번호";
					return;
				}
			};
			// End - User Script
			
			// Header
			var dataSet_1 = new cpr.data.DataSet("ds1");
			dataSet_1.parseData({
				"columns": [
					{
						"name": "BAR_CODE",
						"dataType": "string",
						"displayOnly": true
					},
					{
						"name": "PROD_NM",
						"displayOnly": true
					},
					{
						"name": "QTY",
						"displayOnly": true
					},
					{
						"name": "SALES_PR",
						"displayOnly": true
					},
					{
						"name": "TOTAL_PR",
						"dataType": "expression",
						"displayOnly": true,
						"expression": "(QTY*SALES_PR)"
					},
					{"name": "SALE_PR"},
					{
						"name": "SALE_AMT",
						"dataType": "expression",
						"displayOnly": true,
						"expression": "(QTY*SALE_PR)"
					},
					{
						"name": "SALES_AMT",
						"dataType": "expression",
						"displayOnly": true,
						"expression": "(QTY*SALES_PR)-SALE_AMT"
					}
				],
				"rows": []
			});
			app.register(dataSet_1);
			
			var dataSet_2 = new cpr.data.DataSet("cashRadioBtn");
			dataSet_2.parseData({
				"columns": [
					{"name": "label"},
					{"name": "value"}
				],
				"rows": [
					{"label": "현금", "value": "cash"},
					{"label": "카드", "value": "card"}
				]
			});
			app.register(dataSet_2);
			
			var dataSet_3 = new cpr.data.DataSet("qtySET");
			dataSet_3.parseData({
				"columns" : [
					{"name": "label"},
					{"name": "value"}
				]
			});
			app.register(dataSet_3);
			var submission_1 = new cpr.protocols.Submission("sms1");
			submission_1.method = "get";
			submission_1.action = "/POS/GetProduct.do";
			submission_1.addRequestData(dataSet_1);
			submission_1.addResponseData(dataSet_1, false);
			if(typeof onSms1SubmitSuccess == "function") {
				submission_1.addEventListener("submit-success", onSms1SubmitSuccess);
			}
			app.register(submission_1);
			app.supportMedia("all and (min-width: 1024px)", "default");
			app.supportMedia("all and (min-width: 500px) and (max-width: 1023px)", "tablet");
			app.supportMedia("all and (max-width: 499px)", "mobile");
			
			// Configure root container
			var container = app.getContainer();
			container.overscrollBehavior = "none";
			container.style.css({
				"border-left-color" : "black",
				"border-bottom-width" : "1px",
				"border-right-color" : "black",
				"border-right-style" : "solid",
				"border-bottom-color" : "black",
				"border-top-style" : "solid",
				"border-top-color" : "black",
				"border-left-style" : "solid",
				"border-left-width" : "1px",
				"border-bottom-style" : "solid",
				"width" : "100%",
				"height" : "100%",
				"border-top-width" : "1px",
				"border-right-width" : "1px"
			});
			
			// Layout
			var xYLayout_1 = new cpr.controls.layouts.XYLayout();
			container.setLayout(xYLayout_1);
			
			// UI Configuration
			var grid_1 = new cpr.controls.Grid("grd1");
			grid_1.init({
				"dataSet": app.lookup("ds1"),
				"columnMovable": true,
				"resizableColumns": "all",
				"showDeletedRow": false,
				"columns": [
					{"width": "39px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{"width": "100px"},
					{
						"width": "100px",
						"visible": false
					},
					{"width": "100px"},
					{"width": "100px"}
				],
				"header": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "BAR_CODE";
								cell.text = "바코드";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "PROD_NM";
								cell.text = "상품명";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "QTY";
								cell.text = "수량";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "SALES_PR";
								cell.text = "단가";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "TOTAL_PR";
								cell.text = "판매가격";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 7},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "SALE_AMT";
								cell.text = "할인금액";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 8},
							"configurator": function(cell){
								cell.filterable = false;
								cell.sortable = false;
								cell.targetColumnName = "SALES_AMT";
								cell.text = "판매금액";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnType = "checkbox";
								cell.text = "true";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.text = "할인금액";
							}
						}
					]
				},
				"detail": {
					"rows": [{"height": "24px"}],
					"cells": [
						{
							"constraint": {"rowIndex": 0, "colIndex": 1},
							"configurator": function(cell){
								cell.columnName = "BAR_CODE";
								cell.control = (function(){
									var searchInput_1 = new cpr.controls.SearchInput("searchInput");
									if(typeof onSearchInputSearch == "function") {
										searchInput_1.addEventListener("search", onSearchInputSearch);
									}
									if(typeof onSearchInputValueChange2 == "function") {
										searchInput_1.addEventListener("value-change", onSearchInputValueChange2);
									}
									if(typeof onSearchInputInput == "function") {
										searchInput_1.addEventListener("input", onSearchInputInput);
									}
									if(typeof onSearchInputContextValueChange == "function") {
										searchInput_1.addEventListener("context-value-change", onSearchInputContextValueChange);
									}
									searchInput_1.bind("value").toDataColumn("BAR_CODE");
									return searchInput_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 2},
							"configurator": function(cell){
								cell.columnName = "PROD_NM";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 3},
							"configurator": function(cell){
								cell.columnName = "QTY";
								cell.control = (function(){
									var comboBox_1 = new cpr.controls.ComboBox("qty");
									(function(comboBox_1){
										comboBox_1.setItemSet(app.lookup("qtySET"), {
											"label": "label",
											"value": "value"
										});
									})(comboBox_1);
									if(typeof onQtyChange == "function") {
										comboBox_1.addEventListener("change", onQtyChange);
									}
									if(typeof onQtySelectionChange2 == "function") {
										comboBox_1.addEventListener("selection-change", onQtySelectionChange2);
									}
									comboBox_1.bind("value").toDataColumn("QTY");
									return comboBox_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 4},
							"configurator": function(cell){
								cell.columnName = "SALES_PR";
								cell.control = (function(){
									var numberEditor_1 = new cpr.controls.NumberEditor("nbe4");
									numberEditor_1.readOnly = true;
									numberEditor_1.format = "s#,##0";
									numberEditor_1.bind("value").toDataColumn("SALES_PR");
									return numberEditor_1;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 5},
							"configurator": function(cell){
								cell.columnName = "TOTAL_PR";
								cell.control = (function(){
									var numberEditor_2 = new cpr.controls.NumberEditor("nbe2");
									numberEditor_2.readOnly = true;
									numberEditor_2.format = "s#,##0";
									numberEditor_2.bind("value").toDataColumn("TOTAL_PR");
									return numberEditor_2;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 7},
							"configurator": function(cell){
								cell.columnName = "SALE_AMT";
								cell.control = (function(){
									var numberEditor_3 = new cpr.controls.NumberEditor("nbe1");
									numberEditor_3.readOnly = true;
									numberEditor_3.format = "s#,##0";
									numberEditor_3.bind("value").toDataColumn("SALE_AMT");
									return numberEditor_3;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 8},
							"configurator": function(cell){
								cell.columnName = "SALES_AMT";
								cell.control = (function(){
									var numberEditor_4 = new cpr.controls.NumberEditor("nbe3");
									numberEditor_4.readOnly = true;
									numberEditor_4.format = "s#,##0";
									numberEditor_4.bind("value").toDataColumn("SALES_AMT");
									return numberEditor_4;
								})();
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 0},
							"configurator": function(cell){
								cell.columnType = "checkbox";
							}
						},
						{
							"constraint": {"rowIndex": 0, "colIndex": 6},
							"configurator": function(cell){
								cell.columnName = "SALE_PR";
								cell.control = (function(){
									var output_1 = new cpr.controls.Output();
									output_1.bind("value").toDataColumn("SALE_PR");
									return output_1;
								})();
							}
						}
					]
				}
			});
			if(typeof onGrd1RowCheck == "function") {
				grid_1.addEventListener("row-check", onGrd1RowCheck);
			}
			if(typeof onGrd1SelectionChange == "function") {
				grid_1.addEventListener("selection-change", onGrd1SelectionChange);
			}
			if(typeof onGrd1RowUncheck == "function") {
				grid_1.addEventListener("row-uncheck", onGrd1RowUncheck);
			}
			container.addChild(grid_1, {
				"top": "131px",
				"left": "79px",
				"width": "865px",
				"height": "358px"
			});
			
			var button_1 = new cpr.controls.Button("partCancel");
			button_1.value = "선택취소";
			if(typeof onButtonClick2 == "function") {
				button_1.addEventListener("click", onButtonClick2);
			}
			container.addChild(button_1, {
				"top": "90px",
				"left": "785px",
				"width": "100px",
				"height": "20px"
			});
			
			var button_2 = new cpr.controls.Button("fullCancel");
			button_2.value = "전체취소";
			if(typeof onButtonClick3 == "function") {
				button_2.addEventListener("click", onButtonClick3);
			}
			container.addChild(button_2, {
				"top": "90px",
				"left": "904px",
				"width": "95px",
				"height": "20px"
			});
			
			var radioButton_1 = new cpr.controls.RadioButton("rdb1");
			radioButton_1.value = "cash";
			(function(radioButton_1){
				radioButton_1.setItemSet(app.lookup("cashRadioBtn"), {
					"label": "label",
					"value": "value"
				})
			})(radioButton_1);
			if(typeof onRdb1SelectionChange == "function") {
				radioButton_1.addEventListener("selection-change", onRdb1SelectionChange);
			}
			container.addChild(radioButton_1, {
				"top": "499px",
				"left": "694px",
				"width": "200px",
				"height": "40px"
			});
			
			var inputBox_1 = new cpr.controls.InputBox("TOTAL_PRICE");
			inputBox_1.readOnly = true;
			inputBox_1.style.css({
				"border-radius" : "0px 3px 3px 0px"
			});
			if(typeof onTOTAL_PRICEValueChange == "function") {
				inputBox_1.addEventListener("value-change", onTOTAL_PRICEValueChange);
			}
			container.addChild(inputBox_1, {
				"top": "549px",
				"left": "744px",
				"width": "150px",
				"height": "29px"
			});
			
			var hTMLSnippet_1 = new cpr.controls.HTMLSnippet();
			hTMLSnippet_1.value = "합계";
			hTMLSnippet_1.style.css({
				"border-radius" : "10px 0px 0px 10px",
				"background-color" : "#EDEDED",
				"vertical-align" : "middle",
				"text-align" : "center"
			});
			container.addChild(hTMLSnippet_1, {
				"top": "549px",
				"left": "683px",
				"width": "61px",
				"height": "29px"
			});
			
			var inputBox_2 = new cpr.controls.InputBox("receivedAmount");
			inputBox_2.inputFilter = "[0-9]";
			inputBox_2.style.css({
				"border-radius" : "0px 3px 3px 0px"
			});
			if(typeof onReceivedAmountValueChange == "function") {
				inputBox_2.addEventListener("value-change", onReceivedAmountValueChange);
			}
			if(typeof onReceivedAmountInput == "function") {
				inputBox_2.addEventListener("input", onReceivedAmountInput);
			}
			container.addChild(inputBox_2, {
				"top": "637px",
				"left": "744px",
				"width": "150px",
				"height": "29px"
			});
			
			var hTMLSnippet_2 = new cpr.controls.HTMLSnippet();
			hTMLSnippet_2.value = "받은 돈";
			hTMLSnippet_2.style.css({
				"border-radius" : "10px 0px 0px 10px",
				"background-color" : "#EDEDED",
				"vertical-align" : "middle",
				"text-align" : "center"
			});
			container.addChild(hTMLSnippet_2, {
				"top": "637px",
				"left": "683px",
				"width": "61px",
				"height": "29px"
			});
			
			var inputBox_3 = new cpr.controls.InputBox("changeAmount");
			inputBox_3.readOnly = true;
			inputBox_3.style.css({
				"border-radius" : "0px 3px 3px 0px"
			});
			if(typeof onChangeAmountValueChange == "function") {
				inputBox_3.addEventListener("value-change", onChangeAmountValueChange);
			}
			container.addChild(inputBox_3, {
				"top": "676px",
				"left": "744px",
				"width": "150px",
				"height": "29px"
			});
			
			var hTMLSnippet_3 = new cpr.controls.HTMLSnippet();
			hTMLSnippet_3.value = "거스름돈";
			hTMLSnippet_3.style.css({
				"border-radius" : "10px 0px 0px 10px",
				"background-color" : "#EDEDED",
				"vertical-align" : "middle",
				"text-align" : "center"
			});
			container.addChild(hTMLSnippet_3, {
				"top": "676px",
				"left": "683px",
				"width": "61px",
				"height": "29px"
			});
			
			var button_3 = new cpr.controls.Button();
			button_3.value = "계 산";
			if(typeof onButtonClick == "function") {
				button_3.addEventListener("click", onButtonClick);
			}
			container.addChild(button_3, {
				"top": "549px",
				"left": "904px",
				"width": "93px",
				"height": "156px"
			});
			
			var group_1 = new cpr.controls.Container();
			var xYLayout_2 = new cpr.controls.layouts.XYLayout();
			group_1.setLayout(xYLayout_2);
			(function(container){
				var inputBox_4 = new cpr.controls.InputBox("MEMB_SER_NO");
				inputBox_4.readOnly = true;
				inputBox_4.lengthUnit = "utf8";
				inputBox_4.maxLength = 6;
				inputBox_4.inputFilter = "[0-9]";
				inputBox_4.style.css({
					"border-radius" : "0px 3px 3px 0px"
				});
				if(typeof onIpb1Change == "function") {
					inputBox_4.addEventListener("change", onIpb1Change);
				}
				if(typeof onMEMB_SER_NOValueChange == "function") {
					inputBox_4.addEventListener("value-change", onMEMB_SER_NOValueChange);
				}
				container.addChild(inputBox_4, {
					"top": "41px",
					"left": "100px",
					"width": "150px",
					"height": "25px"
				});
				var inputBox_5 = new cpr.controls.InputBox("MEMB_NM");
				inputBox_5.lengthUnit = "utf8";
				inputBox_5.maxLength = 13;
				inputBox_5.style.css({
					"border-radius" : "0px 3px 3px 0px"
				});
				if(typeof onMEMB_NMBeforeValueChange == "function") {
					inputBox_5.addEventListener("before-value-change", onMEMB_NMBeforeValueChange);
				}
				if(typeof onMEMB_NMValueChange == "function") {
					inputBox_5.addEventListener("value-change", onMEMB_NMValueChange);
				}
				if(typeof onMEMB_NMInput2 == "function") {
					inputBox_5.addEventListener("input", onMEMB_NMInput2);
				}
				container.addChild(inputBox_5, {
					"top": "70px",
					"left": "100px",
					"width": "150px",
					"height": "25px"
				});
				var inputBox_6 = new cpr.controls.InputBox("ADDR");
				inputBox_6.readOnly = true;
				inputBox_6.lengthUnit = "utf8";
				inputBox_6.style.css({
					"border-radius" : "0px 3px 3px 0px"
				});
				container.addChild(inputBox_6, {
					"top": "99px",
					"left": "100px",
					"width": "430px",
					"height": "25px"
				});
				var inputBox_7 = new cpr.controls.InputBox("ID_NO");
				inputBox_7.lengthUnit = "utf8";
				inputBox_7.maxLength = 13;
				inputBox_7.inputFilter = "[0-9]";
				inputBox_7.style.css({
					"border-radius" : "0px 3px 3px 0px"
				});
				if(typeof onID_NOInput == "function") {
					inputBox_7.addEventListener("input", onID_NOInput);
				}
				if(typeof onID_NOValueChange2 == "function") {
					inputBox_7.addEventListener("value-change", onID_NOValueChange2);
				}
				container.addChild(inputBox_7, {
					"top": "134px",
					"left": "100px",
					"width": "150px",
					"height": "25px"
				});
				var inputBox_8 = new cpr.controls.InputBox("BUSI_NO");
				inputBox_8.readOnly = true;
				inputBox_8.lengthUnit = "utf8";
				inputBox_8.maxLength = 10;
				inputBox_8.inputFilter = "[0-9]";
				inputBox_8.style.css({
					"border-radius" : "0px 3px 3px 0px"
				});
				if(typeof onBUSI_NOInput == "function") {
					inputBox_8.addEventListener("input", onBUSI_NOInput);
				}
				container.addChild(inputBox_8, {
					"top": "134px",
					"left": "380px",
					"width": "150px",
					"height": "25px"
				});
				var inputBox_9 = new cpr.controls.InputBox("POINT");
				inputBox_9.readOnly = true;
				inputBox_9.lengthUnit = "utf8";
				inputBox_9.style.css({
					"border-radius" : "0px 3px 3px 0px"
				});
				if(typeof onIpb7ValueChange == "function") {
					inputBox_9.addEventListener("value-change", onIpb7ValueChange);
				}
				container.addChild(inputBox_9, {
					"top": "70px",
					"left": "380px",
					"width": "150px",
					"height": "25px"
				});
				var inputBox_10 = new cpr.controls.InputBox("PH_NO");
				inputBox_10.lengthUnit = "utf8";
				inputBox_10.maxLength = 11;
				inputBox_10.inputFilter = "[0-9]";
				inputBox_10.style.css({
					"border-radius" : "0px 3px 3px 0px"
				});
				if(typeof onPH_NOChange == "function") {
					inputBox_10.addEventListener("change", onPH_NOChange);
				}
				if(typeof onPH_NOBeforeValueChange == "function") {
					inputBox_10.addEventListener("before-value-change", onPH_NOBeforeValueChange);
				}
				if(typeof onPH_NOInput == "function") {
					inputBox_10.addEventListener("input", onPH_NOInput);
				}
				if(typeof onPH_NOValueChange2 == "function") {
					inputBox_10.addEventListener("value-change", onPH_NOValueChange2);
				}
				container.addChild(inputBox_10, {
					"top": "41px",
					"left": "380px",
					"width": "150px",
					"height": "25px"
				});
				var button_4 = new cpr.controls.Button();
				button_4.value = "검색";
				if(typeof onButtonClick4 == "function") {
					button_4.addEventListener("click", onButtonClick4);
				}
				container.addChild(button_4, {
					"top": "41px",
					"left": "540px",
					"width": "38px",
					"height": "25px"
				});
				var button_5 = new cpr.controls.Button();
				button_5.value = "회원 등록";
				if(typeof onButtonClick5 == "function") {
					button_5.addEventListener("click", onButtonClick5);
				}
				container.addChild(button_5, {
					"top": "11px",
					"left": "449px",
					"width": "81px",
					"height": "20px"
				});
				var hTMLSnippet_4 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_4.value = "회원 번호";
				hTMLSnippet_4.style.css({
					"background-color" : "#ededed",
					"border-radius" : "5px 0px 0px 5px",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(hTMLSnippet_4, {
					"top": "41px",
					"left": "10px",
					"width": "90px",
					"height": "25px"
				});
				var hTMLSnippet_5 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_5.value = "*회원 이름";
				hTMLSnippet_5.style.css({
					"background-color" : "#ededed",
					"border-radius" : "5px 0px 0px 5px",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(hTMLSnippet_5, {
					"top": "70px",
					"left": "10px",
					"width": "90px",
					"height": "25px"
				});
				var hTMLSnippet_6 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_6.value = "주소";
				hTMLSnippet_6.style.css({
					"background-color" : "#ededed",
					"border-radius" : "5px 0px 0px 5px",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(hTMLSnippet_6, {
					"top": "99px",
					"left": "10px",
					"width": "90px",
					"height": "25px"
				});
				var hTMLSnippet_7 = new cpr.controls.HTMLSnippet("idSnp");
				hTMLSnippet_7.value = "*주민번호";
				hTMLSnippet_7.style.css({
					"background-color" : "#ededed",
					"border-radius" : "5px 0px 0px 5px",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(hTMLSnippet_7, {
					"top": "134px",
					"left": "10px",
					"width": "90px",
					"height": "25px"
				});
				var hTMLSnippet_8 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_8.value = "사업자 번호";
				hTMLSnippet_8.style.css({
					"background-color" : "#ededed",
					"border-radius" : "5px 0px 0px 5px",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(hTMLSnippet_8, {
					"top": "134px",
					"left": "290px",
					"width": "90px",
					"height": "25px"
				});
				var hTMLSnippet_9 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_9.value = "회원 포인트";
				hTMLSnippet_9.style.css({
					"background-color" : "#ededed",
					"border-radius" : "5px 0px 0px 5px",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(hTMLSnippet_9, {
					"top": "70px",
					"left": "290px",
					"width": "90px",
					"height": "25px"
				});
				var hTMLSnippet_10 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_10.value = "*전화번호";
				hTMLSnippet_10.style.css({
					"background-color" : "#ededed",
					"border-radius" : "5px 0px 0px 5px",
					"background-image" : "none",
					"text-align" : "center"
				});
				container.addChild(hTMLSnippet_10, {
					"top": "41px",
					"left": "290px",
					"width": "90px",
					"height": "25px"
				});
				var hTMLSnippet_11 = new cpr.controls.HTMLSnippet();
				hTMLSnippet_11.value = "고객 정보";
				hTMLSnippet_11.style.css({
					"border-right-style" : "solid",
					"border-top-width" : "1px",
					"color" : "white",
					"border-right-width" : "1px",
					"vertical-align" : "middle",
					"border-left-width" : "1px",
					"border-top-style" : "solid",
					"background-color" : "black",
					"border-radius" : "25px",
					"border-left-style" : "solid",
					"border-bottom-width" : "1px",
					"border-bottom-style" : "solid",
					"text-align" : "center"
				});
				container.addChild(hTMLSnippet_11, {
					"top": "10px",
					"left": "10px",
					"width": "100px",
					"height": "25px"
				});
				var button_6 = new cpr.controls.Button();
				button_6.value = "초기화";
				if(typeof onButtonClick7 == "function") {
					button_6.addEventListener("click", onButtonClick7);
				}
				container.addChild(button_6, {
					"top": "41px",
					"left": "585px",
					"width": "49px",
					"height": "25px"
				});
				var inputBox_11 = new cpr.controls.InputBox("PERS_COP_TY");
				inputBox_11.visible = false;
				inputBox_11.lengthUnit = "utf8";
				inputBox_11.maxLength = 10;
				inputBox_11.inputFilter = "[0-9]";
				inputBox_11.style.css({
					"border-radius" : "0px 3px 3px 0px"
				});
				if(typeof onPERS_COP_TYValueChange == "function") {
					inputBox_11.addEventListener("value-change", onPERS_COP_TYValueChange);
				}
				container.addChild(inputBox_11, {
					"top": "10px",
					"left": "130px",
					"width": "120px",
					"height": "25px"
				});
			})(group_1);
			container.addChild(group_1, {
				"top": "516px",
				"left": "19px",
				"width": "645px",
				"height": "191px"
			});
			
			var embeddedApp_1 = new cpr.controls.EmbeddedApp("ea1");
			cpr.core.App.load("PosHeader", function(app) {
				if(app){
					embeddedApp_1.app = app;
				}
			});
			container.addChild(embeddedApp_1, {
				"top": "0px",
				"left": "0px",
				"width": "1024px",
				"height": "80px"
			});
			
			var button_7 = new cpr.controls.Button();
			button_7.value = "입력";
			if(typeof onButtonClick6 == "function") {
				button_7.addEventListener("click", onButtonClick6);
			}
			container.addChild(button_7, {
				"top": "90px",
				"left": "50px",
				"width": "100px",
				"height": "20px"
			});
			
			var hTMLSnippet_12 = new cpr.controls.HTMLSnippet();
			hTMLSnippet_12.visible = false;
			hTMLSnippet_12.value = "총 판매액";
			hTMLSnippet_12.style.css({
				"background-color" : "#ededed",
				"border-radius" : "5px 0px 0px 5px",
				"background-image" : "none",
				"text-align" : "center"
			});
			container.addChild(hTMLSnippet_12, {
				"top": "715px",
				"left": "32px",
				"width": "90px",
				"height": "25px"
			});
			
			var inputBox_12 = new cpr.controls.InputBox("Total_Buy");
			inputBox_12.visible = false;
			inputBox_12.readOnly = true;
			inputBox_12.lengthUnit = "utf8";
			inputBox_12.style.css({
				"border-radius" : "0px 3px 3px 0px"
			});
			container.addChild(inputBox_12, {
				"top": "715px",
				"left": "121px",
				"width": "150px",
				"height": "25px"
			});
			
			var inputBox_13 = new cpr.controls.InputBox("usedPoint");
			inputBox_13.readOnly = true;
			inputBox_13.inputFilter = "[0-9]";
			inputBox_13.style.css({
				"border-radius" : "0px 3px 3px 0px"
			});
			if(typeof onUsedPointValueChange == "function") {
				inputBox_13.addEventListener("value-change", onUsedPointValueChange);
			}
			if(typeof onUsedPointInput == "function") {
				inputBox_13.addEventListener("input", onUsedPointInput);
			}
			if(typeof onUsedPointBeforeValueChange == "function") {
				inputBox_13.addEventListener("before-value-change", onUsedPointBeforeValueChange);
			}
			container.addChild(inputBox_13, {
				"top": "597px",
				"left": "744px",
				"width": "150px",
				"height": "29px"
			});
			
			var hTMLSnippet_13 = new cpr.controls.HTMLSnippet();
			hTMLSnippet_13.value = "포인트";
			hTMLSnippet_13.style.css({
				"border-radius" : "10px 0px 0px 10px",
				"background-color" : "#EDEDED",
				"vertical-align" : "middle",
				"text-align" : "center"
			});
			container.addChild(hTMLSnippet_13, {
				"top": "597px",
				"left": "683px",
				"width": "61px",
				"height": "29px"
			});
			if(typeof onBodyLoad2 == "function"){
				app.addEventListener("load", onBodyLoad2);
			}
		}
	});
	app.title = "PosMain";
	cpr.core.Platform.INSTANCE.register(app);
})();
